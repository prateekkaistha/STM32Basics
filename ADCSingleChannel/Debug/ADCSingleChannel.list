
ADCSingleChannel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003844  08003844  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003844  08003844  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003844  08003844  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800384c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003858  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003858  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012130  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f86  00000000  00000000  0003216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  000340f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  00034cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b356  00000000  00000000  000357b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a950  00000000  00000000  00050b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c750  00000000  00000000  0005b456  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7ba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003138  00000000  00000000  000f7c24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037fc 	.word	0x080037fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037fc 	.word	0x080037fc

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f001 f941 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f003 f988 	bl	80034f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f001 f959 	bl	80014ca <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f001 f921 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b09c      	sub	sp, #112	; 0x70
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002d8:	2300      	movs	r3, #0
 80002da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80002de:	2300      	movs	r3, #0
 80002e0:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d101      	bne.n	80002f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002ec:	2301      	movs	r3, #1
 80002ee:	e1c8      	b.n	8000682 <HAL_ADC_Init+0x3b2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d176      	bne.n	80003f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000306:	2b00      	cmp	r3, #0
 8000308:	d152      	bne.n	80003b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2200      	movs	r2, #0
 800030e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f003 f90b 	bl	8003540 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000334:	2b00      	cmp	r3, #0
 8000336:	d13b      	bne.n	80003b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f000 ff65 	bl	8001208 <ADC_Disable>
 800033e:	4603      	mov	r3, r0
 8000340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000348:	f003 0310 	and.w	r3, r3, #16
 800034c:	2b00      	cmp	r3, #0
 800034e:	d12f      	bne.n	80003b0 <HAL_ADC_Init+0xe0>
 8000350:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000354:	2b00      	cmp	r3, #0
 8000356:	d12b      	bne.n	80003b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800035c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000360:	f023 0302 	bic.w	r3, r3, #2
 8000364:	f043 0202 	orr.w	r2, r3, #2
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	689a      	ldr	r2, [r3, #8]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800037a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800038a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800038c:	4b86      	ldr	r3, [pc, #536]	; (80005a8 <HAL_ADC_Init+0x2d8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a86      	ldr	r2, [pc, #536]	; (80005ac <HAL_ADC_Init+0x2dc>)
 8000392:	fba2 2303 	umull	r2, r3, r2, r3
 8000396:	0c9a      	lsrs	r2, r3, #18
 8000398:	4613      	mov	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80003a2:	e002      	b.n	80003aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d1f9      	bne.n	80003a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d007      	beq.n	80003ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003cc:	d110      	bne.n	80003f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d2:	f023 0312 	bic.w	r3, r3, #18
 80003d6:	f043 0210 	orr.w	r2, r3, #16
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003e2:	f043 0201 	orr.w	r2, r3, #1
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f4:	f003 0310 	and.w	r3, r3, #16
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	f040 8135 	bne.w	8000668 <HAL_ADC_Init+0x398>
 80003fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8130 	bne.w	8000668 <HAL_ADC_Init+0x398>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000412:	2b00      	cmp	r3, #0
 8000414:	f040 8128 	bne.w	8000668 <HAL_ADC_Init+0x398>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800041c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000420:	f043 0202 	orr.w	r2, r3, #2
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000430:	d004      	beq.n	800043c <HAL_ADC_Init+0x16c>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a5e      	ldr	r2, [pc, #376]	; (80005b0 <HAL_ADC_Init+0x2e0>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d101      	bne.n	8000440 <HAL_ADC_Init+0x170>
 800043c:	4b5d      	ldr	r3, [pc, #372]	; (80005b4 <HAL_ADC_Init+0x2e4>)
 800043e:	e000      	b.n	8000442 <HAL_ADC_Init+0x172>
 8000440:	4b5d      	ldr	r3, [pc, #372]	; (80005b8 <HAL_ADC_Init+0x2e8>)
 8000442:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800044c:	d102      	bne.n	8000454 <HAL_ADC_Init+0x184>
 800044e:	4b58      	ldr	r3, [pc, #352]	; (80005b0 <HAL_ADC_Init+0x2e0>)
 8000450:	613b      	str	r3, [r7, #16]
 8000452:	e01a      	b.n	800048a <HAL_ADC_Init+0x1ba>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a55      	ldr	r2, [pc, #340]	; (80005b0 <HAL_ADC_Init+0x2e0>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d103      	bne.n	8000466 <HAL_ADC_Init+0x196>
 800045e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000462:	613b      	str	r3, [r7, #16]
 8000464:	e011      	b.n	800048a <HAL_ADC_Init+0x1ba>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a54      	ldr	r2, [pc, #336]	; (80005bc <HAL_ADC_Init+0x2ec>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d102      	bne.n	8000476 <HAL_ADC_Init+0x1a6>
 8000470:	4b53      	ldr	r3, [pc, #332]	; (80005c0 <HAL_ADC_Init+0x2f0>)
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	e009      	b.n	800048a <HAL_ADC_Init+0x1ba>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a51      	ldr	r2, [pc, #324]	; (80005c0 <HAL_ADC_Init+0x2f0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d102      	bne.n	8000486 <HAL_ADC_Init+0x1b6>
 8000480:	4b4e      	ldr	r3, [pc, #312]	; (80005bc <HAL_ADC_Init+0x2ec>)
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	e001      	b.n	800048a <HAL_ADC_Init+0x1ba>
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	f003 0303 	and.w	r3, r3, #3
 8000494:	2b01      	cmp	r3, #1
 8000496:	d108      	bne.n	80004aa <HAL_ADC_Init+0x1da>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d101      	bne.n	80004aa <HAL_ADC_Init+0x1da>
 80004a6:	2301      	movs	r3, #1
 80004a8:	e000      	b.n	80004ac <HAL_ADC_Init+0x1dc>
 80004aa:	2300      	movs	r3, #0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d11c      	bne.n	80004ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004b0:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d010      	beq.n	80004d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	f003 0303 	and.w	r3, r3, #3
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d107      	bne.n	80004d2 <HAL_ADC_Init+0x202>
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d101      	bne.n	80004d2 <HAL_ADC_Init+0x202>
 80004ce:	2301      	movs	r3, #1
 80004d0:	e000      	b.n	80004d4 <HAL_ADC_Init+0x204>
 80004d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d108      	bne.n	80004ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80004d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	431a      	orrs	r2, r3
 80004e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	035b      	lsls	r3, r3, #13
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80004f4:	2a01      	cmp	r2, #1
 80004f6:	d002      	beq.n	80004fe <HAL_ADC_Init+0x22e>
 80004f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004fc:	e000      	b.n	8000500 <HAL_ADC_Init+0x230>
 80004fe:	2200      	movs	r2, #0
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	431a      	orrs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	4313      	orrs	r3, r2
 800050e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000510:	4313      	orrs	r3, r2
 8000512:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000518:	2b01      	cmp	r3, #1
 800051a:	d11b      	bne.n	8000554 <HAL_ADC_Init+0x284>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d109      	bne.n	8000538 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000528:	3b01      	subs	r3, #1
 800052a:	045a      	lsls	r2, r3, #17
 800052c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800052e:	4313      	orrs	r3, r2
 8000530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000534:	66bb      	str	r3, [r7, #104]	; 0x68
 8000536:	e00d      	b.n	8000554 <HAL_ADC_Init+0x284>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000540:	f043 0220 	orr.w	r2, r3, #32
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800054c:	f043 0201 	orr.w	r2, r3, #1
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000558:	2b01      	cmp	r3, #1
 800055a:	d03b      	beq.n	80005d4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <HAL_ADC_Init+0x2ec>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d004      	beq.n	8000570 <HAL_ADC_Init+0x2a0>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <HAL_ADC_Init+0x2f0>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d129      	bne.n	80005c4 <HAL_ADC_Init+0x2f4>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000574:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000578:	d012      	beq.n	80005a0 <HAL_ADC_Init+0x2d0>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000582:	d00a      	beq.n	800059a <HAL_ADC_Init+0x2ca>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000588:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800058c:	d002      	beq.n	8000594 <HAL_ADC_Init+0x2c4>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000592:	e019      	b.n	80005c8 <HAL_ADC_Init+0x2f8>
 8000594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000598:	e016      	b.n	80005c8 <HAL_ADC_Init+0x2f8>
 800059a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800059e:	e013      	b.n	80005c8 <HAL_ADC_Init+0x2f8>
 80005a0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80005a4:	e010      	b.n	80005c8 <HAL_ADC_Init+0x2f8>
 80005a6:	bf00      	nop
 80005a8:	20000008 	.word	0x20000008
 80005ac:	431bde83 	.word	0x431bde83
 80005b0:	50000100 	.word	0x50000100
 80005b4:	50000300 	.word	0x50000300
 80005b8:	50000700 	.word	0x50000700
 80005bc:	50000400 	.word	0x50000400
 80005c0:	50000500 	.word	0x50000500
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80005cc:	4313      	orrs	r3, r2
 80005ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80005d0:	4313      	orrs	r3, r2
 80005d2:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f003 030c 	and.w	r3, r3, #12
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d113      	bne.n	800060a <HAL_ADC_Init+0x33a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005f0:	f023 0302 	bic.w	r3, r3, #2
 80005f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	039a      	lsls	r2, r3, #14
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4313      	orrs	r3, r2
 8000604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000606:	4313      	orrs	r3, r2
 8000608:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_ADC_Init+0x3bc>)
 8000612:	4013      	ands	r3, r2
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800061a:	430b      	orrs	r3, r1
 800061c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d10c      	bne.n	8000640 <HAL_ADC_Init+0x370>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	f023 010f 	bic.w	r1, r3, #15
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	430a      	orrs	r2, r1
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
 800063e:	e007      	b.n	8000650 <HAL_ADC_Init+0x380>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f022 020f 	bic.w	r2, r2, #15
 800064e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	f023 0303 	bic.w	r3, r3, #3
 800065e:	f043 0201 	orr.w	r2, r3, #1
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	645a      	str	r2, [r3, #68]	; 0x44
 8000666:	e00a      	b.n	800067e <HAL_ADC_Init+0x3ae>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066c:	f023 0312 	bic.w	r3, r3, #18
 8000670:	f043 0210 	orr.w	r2, r3, #16
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000678:	2301      	movs	r3, #1
 800067a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800067e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000682:	4618      	mov	r0, r3
 8000684:	3770      	adds	r7, #112	; 0x70
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	fff0c007 	.word	0xfff0c007

08000690 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f040 80f7 	bne.w	800089e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Start_DMA+0x2e>
 80006ba:	2302      	movs	r3, #2
 80006bc:	e0f2      	b.n	80008a4 <HAL_ADC_Start_DMA+0x214>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2201      	movs	r2, #1
 80006c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006ce:	d004      	beq.n	80006da <HAL_ADC_Start_DMA+0x4a>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a75      	ldr	r2, [pc, #468]	; (80008ac <HAL_ADC_Start_DMA+0x21c>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d109      	bne.n	80006ee <HAL_ADC_Start_DMA+0x5e>
 80006da:	4b75      	ldr	r3, [pc, #468]	; (80008b0 <HAL_ADC_Start_DMA+0x220>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	f003 031f 	and.w	r3, r3, #31
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf0c      	ite	eq
 80006e6:	2301      	moveq	r3, #1
 80006e8:	2300      	movne	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	e008      	b.n	8000700 <HAL_ADC_Start_DMA+0x70>
 80006ee:	4b71      	ldr	r3, [pc, #452]	; (80008b4 <HAL_ADC_Start_DMA+0x224>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf0c      	ite	eq
 80006fa:	2301      	moveq	r3, #1
 80006fc:	2300      	movne	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	f000 80c5 	beq.w	8000890 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f000 fd20 	bl	800114c <ADC_Enable>
 800070c:	4603      	mov	r3, r0
 800070e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 80b7 	bne.w	8000886 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000734:	d004      	beq.n	8000740 <HAL_ADC_Start_DMA+0xb0>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a5c      	ldr	r2, [pc, #368]	; (80008ac <HAL_ADC_Start_DMA+0x21c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d106      	bne.n	800074e <HAL_ADC_Start_DMA+0xbe>
 8000740:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <HAL_ADC_Start_DMA+0x220>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 031f 	and.w	r3, r3, #31
 8000748:	2b00      	cmp	r3, #0
 800074a:	d010      	beq.n	800076e <HAL_ADC_Start_DMA+0xde>
 800074c:	e005      	b.n	800075a <HAL_ADC_Start_DMA+0xca>
 800074e:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <HAL_ADC_Start_DMA+0x224>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	2b00      	cmp	r3, #0
 8000758:	d009      	beq.n	800076e <HAL_ADC_Start_DMA+0xde>
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000762:	d004      	beq.n	800076e <HAL_ADC_Start_DMA+0xde>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a53      	ldr	r2, [pc, #332]	; (80008b8 <HAL_ADC_Start_DMA+0x228>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d115      	bne.n	800079a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000784:	2b00      	cmp	r3, #0
 8000786:	d036      	beq.n	80007f6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000790:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	645a      	str	r2, [r3, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000798:	e02d      	b.n	80007f6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ae:	d004      	beq.n	80007ba <HAL_ADC_Start_DMA+0x12a>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a3d      	ldr	r2, [pc, #244]	; (80008ac <HAL_ADC_Start_DMA+0x21c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10a      	bne.n	80007d0 <HAL_ADC_Start_DMA+0x140>
 80007ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bf14      	ite	ne
 80007c8:	2301      	movne	r3, #1
 80007ca:	2300      	moveq	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	e008      	b.n	80007e2 <HAL_ADC_Start_DMA+0x152>
 80007d0:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <HAL_ADC_Start_DMA+0x228>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d007      	beq.n	80007f6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	645a      	str	r2, [r3, #68]	; 0x44
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000802:	d106      	bne.n	8000812 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000808:	f023 0206 	bic.w	r2, r3, #6
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	649a      	str	r2, [r3, #72]	; 0x48
 8000810:	e002      	b.n	8000818 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2200      	movs	r2, #0
 8000816:	649a      	str	r2, [r3, #72]	; 0x48
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000824:	4a25      	ldr	r2, [pc, #148]	; (80008bc <HAL_ADC_Start_DMA+0x22c>)
 8000826:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800082c:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <HAL_ADC_Start_DMA+0x230>)
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000834:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <HAL_ADC_Start_DMA+0x234>)
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	221c      	movs	r2, #28
 800083e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f042 0210 	orr.w	r2, r2, #16
 800084e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0201 	orr.w	r2, r2, #1
 800085e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3340      	adds	r3, #64	; 0x40
 800086a:	4619      	mov	r1, r3
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f000 fe7e 	bl	8001570 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f042 0204 	orr.w	r2, r2, #4
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	e00d      	b.n	80008a2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800088e:	e008      	b.n	80008a2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800089c:	e001      	b.n	80008a2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800089e:	2302      	movs	r3, #2
 80008a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	50000100 	.word	0x50000100
 80008b0:	50000300 	.word	0x50000300
 80008b4:	50000700 	.word	0x50000700
 80008b8:	50000400 	.word	0x50000400
 80008bc:	08001081 	.word	0x08001081
 80008c0:	080010fb 	.word	0x080010fb
 80008c4:	08001117 	.word	0x08001117

080008c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b09d      	sub	sp, #116	; 0x74
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d101      	bne.n	80008ea <HAL_ADC_ConfigChannel+0x22>
 80008e6:	2302      	movs	r3, #2
 80008e8:	e2cb      	b.n	8000e82 <HAL_ADC_ConfigChannel+0x5ba>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	f040 82af 	bne.w	8000e60 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b04      	cmp	r3, #4
 8000908:	d81c      	bhi.n	8000944 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	461a      	mov	r2, r3
 800091e:	231f      	movs	r3, #31
 8000920:	4093      	lsls	r3, r2
 8000922:	43db      	mvns	r3, r3
 8000924:	4019      	ands	r1, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa00 f203 	lsl.w	r2, r0, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
 8000942:	e063      	b.n	8000a0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b09      	cmp	r3, #9
 800094a:	d81e      	bhi.n	800098a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	3b1e      	subs	r3, #30
 8000960:	221f      	movs	r2, #31
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	4019      	ands	r1, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	3b1e      	subs	r3, #30
 800097c:	fa00 f203 	lsl.w	r2, r0, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	430a      	orrs	r2, r1
 8000986:	635a      	str	r2, [r3, #52]	; 0x34
 8000988:	e040      	b.n	8000a0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b0e      	cmp	r3, #14
 8000990:	d81e      	bhi.n	80009d0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	3b3c      	subs	r3, #60	; 0x3c
 80009a6:	221f      	movs	r2, #31
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	4019      	ands	r1, r3
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	3b3c      	subs	r3, #60	; 0x3c
 80009c2:	fa00 f203 	lsl.w	r2, r0, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
 80009ce:	e01d      	b.n	8000a0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	3b5a      	subs	r3, #90	; 0x5a
 80009e4:	221f      	movs	r2, #31
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	4019      	ands	r1, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	3b5a      	subs	r3, #90	; 0x5a
 8000a00:	fa00 f203 	lsl.w	r2, r0, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 030c 	and.w	r3, r3, #12
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 80e5 	bne.w	8000be6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	d91c      	bls.n	8000a5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6999      	ldr	r1, [r3, #24]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	3b1e      	subs	r3, #30
 8000a36:	2207      	movs	r2, #7
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4019      	ands	r1, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6898      	ldr	r0, [r3, #8]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	3b1e      	subs	r3, #30
 8000a50:	fa00 f203 	lsl.w	r2, r0, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	619a      	str	r2, [r3, #24]
 8000a5c:	e019      	b.n	8000a92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6959      	ldr	r1, [r3, #20]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2207      	movs	r2, #7
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4019      	ands	r1, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	6898      	ldr	r0, [r3, #8]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	fa00 f203 	lsl.w	r2, r0, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d84f      	bhi.n	8000b54 <HAL_ADC_ConfigChannel+0x28c>
 8000ab4:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <HAL_ADC_ConfigChannel+0x1f4>)
 8000ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aba:	bf00      	nop
 8000abc:	08000acd 	.word	0x08000acd
 8000ac0:	08000aef 	.word	0x08000aef
 8000ac4:	08000b11 	.word	0x08000b11
 8000ac8:	08000b33 	.word	0x08000b33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ad2:	4b9f      	ldr	r3, [pc, #636]	; (8000d50 <HAL_ADC_ConfigChannel+0x488>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	6812      	ldr	r2, [r2, #0]
 8000ada:	0691      	lsls	r1, r2, #26
 8000adc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000aea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000aec:	e07e      	b.n	8000bec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000af4:	4b96      	ldr	r3, [pc, #600]	; (8000d50 <HAL_ADC_ConfigChannel+0x488>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	0691      	lsls	r1, r2, #26
 8000afe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b00:	430a      	orrs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b0e:	e06d      	b.n	8000bec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000b16:	4b8e      	ldr	r3, [pc, #568]	; (8000d50 <HAL_ADC_ConfigChannel+0x488>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	0691      	lsls	r1, r2, #26
 8000b20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b22:	430a      	orrs	r2, r1
 8000b24:	431a      	orrs	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b30:	e05c      	b.n	8000bec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000b38:	4b85      	ldr	r3, [pc, #532]	; (8000d50 <HAL_ADC_ConfigChannel+0x488>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	0691      	lsls	r1, r2, #26
 8000b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b44:	430a      	orrs	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b52:	e04b      	b.n	8000bec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	069b      	lsls	r3, r3, #26
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d107      	bne.n	8000b78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	069b      	lsls	r3, r3, #26
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d107      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	069b      	lsls	r3, r3, #26
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d107      	bne.n	8000bc0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000bbe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	069b      	lsls	r3, r3, #26
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d10a      	bne.n	8000bea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000be2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000be4:	e001      	b.n	8000bea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000be6:	bf00      	nop
 8000be8:	e000      	b.n	8000bec <HAL_ADC_ConfigChannel+0x324>
      break;
 8000bea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d108      	bne.n	8000c0c <HAL_ADC_ConfigChannel+0x344>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <HAL_ADC_ConfigChannel+0x344>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x346>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 8131 	bne.w	8000e76 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d00f      	beq.n	8000c3c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	400a      	ands	r2, r1
 8000c36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000c3a:	e049      	b.n	8000cd0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b09      	cmp	r3, #9
 8000c5c:	d91c      	bls.n	8000c98 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6999      	ldr	r1, [r3, #24]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3b1b      	subs	r3, #27
 8000c70:	2207      	movs	r2, #7
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4019      	ands	r1, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	6898      	ldr	r0, [r3, #8]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	3b1b      	subs	r3, #27
 8000c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	619a      	str	r2, [r3, #24]
 8000c96:	e01b      	b.n	8000cd0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6959      	ldr	r1, [r3, #20]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	2207      	movs	r2, #7
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4019      	ands	r1, r3
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	6898      	ldr	r0, [r3, #8]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cd8:	d004      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x41c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_ADC_ConfigChannel+0x48c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d101      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x420>
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_ADC_ConfigChannel+0x490>)
 8000ce6:	e000      	b.n	8000cea <HAL_ADC_ConfigChannel+0x422>
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_ADC_ConfigChannel+0x494>)
 8000cea:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b10      	cmp	r3, #16
 8000cf2:	d105      	bne.n	8000d00 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d015      	beq.n	8000d2c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d04:	2b11      	cmp	r3, #17
 8000d06:	d105      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00b      	beq.n	8000d2c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d18:	2b12      	cmp	r3, #18
 8000d1a:	f040 80ac 	bne.w	8000e76 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 80a5 	bne.w	8000e76 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d34:	d102      	bne.n	8000d3c <HAL_ADC_ConfigChannel+0x474>
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_ADC_ConfigChannel+0x48c>)
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e023      	b.n	8000d84 <HAL_ADC_ConfigChannel+0x4bc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_ADC_ConfigChannel+0x48c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10c      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x498>
 8000d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	e01a      	b.n	8000d84 <HAL_ADC_ConfigChannel+0x4bc>
 8000d4e:	bf00      	nop
 8000d50:	83fff000 	.word	0x83fff000
 8000d54:	50000100 	.word	0x50000100
 8000d58:	50000300 	.word	0x50000300
 8000d5c:	50000700 	.word	0x50000700
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <HAL_ADC_ConfigChannel+0x5c8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d102      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x4a8>
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <HAL_ADC_ConfigChannel+0x5cc>)
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	e009      	b.n	8000d84 <HAL_ADC_ConfigChannel+0x4bc>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a47      	ldr	r2, [pc, #284]	; (8000e94 <HAL_ADC_ConfigChannel+0x5cc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d102      	bne.n	8000d80 <HAL_ADC_ConfigChannel+0x4b8>
 8000d7a:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <HAL_ADC_ConfigChannel+0x5c8>)
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e001      	b.n	8000d84 <HAL_ADC_ConfigChannel+0x4bc>
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d108      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x4dc>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d101      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x4dc>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_ADC_ConfigChannel+0x4de>
 8000da4:	2300      	movs	r3, #0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d150      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000daa:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d010      	beq.n	8000dd2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d107      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x504>
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x504>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_ADC_ConfigChannel+0x506>
 8000dcc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d13c      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b10      	cmp	r3, #16
 8000dd8:	d11d      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x54e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de2:	d118      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dee:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df0:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HAL_ADC_ConfigChannel+0x5d0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <HAL_ADC_ConfigChannel+0x5d4>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9a      	lsrs	r2, r3, #18
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e06:	e002      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f9      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e14:	e02e      	b.n	8000e74 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b11      	cmp	r3, #17
 8000e1c:	d10b      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x56e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e26:	d106      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e32:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e34:	e01e      	b.n	8000e74 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d11a      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e48:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e4a:	e013      	b.n	8000e74 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	f043 0220 	orr.w	r2, r3, #32
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000e5e:	e00a      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f043 0220 	orr.w	r2, r3, #32
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000e72:	e000      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e74:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000e7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3774      	adds	r7, #116	; 0x74
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	50000400 	.word	0x50000400
 8000e94:	50000500 	.word	0x50000500
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	431bde83 	.word	0x431bde83

08000ea0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b09b      	sub	sp, #108	; 0x6c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb8:	d102      	bne.n	8000ec0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8000eba:	4b6c      	ldr	r3, [pc, #432]	; (800106c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e01a      	b.n	8000ef6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a69      	ldr	r2, [pc, #420]	; (800106c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d103      	bne.n	8000ed2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8000eca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	e011      	b.n	8000ef6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a66      	ldr	r2, [pc, #408]	; (8001070 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d102      	bne.n	8000ee2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8000edc:	4b65      	ldr	r3, [pc, #404]	; (8001074 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e009      	b.n	8000ef6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a63      	ldr	r2, [pc, #396]	; (8001074 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d102      	bne.n	8000ef2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8000eec:	4b60      	ldr	r3, [pc, #384]	; (8001070 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	e001      	b.n	8000ef6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e0af      	b.n	8001060 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d101      	bne.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e0a8      	b.n	8001060 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 808c 	bne.w	800103e <HAL_ADCEx_MultiModeConfigChannel+0x19e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f040 8085 	bne.w	800103e <HAL_ADCEx_MultiModeConfigChannel+0x19e>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3c:	d004      	beq.n	8000f48 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8000f4a:	e000      	b.n	8000f4e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8000f4c:	4b4b      	ldr	r3, [pc, #300]	; (800107c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8000f4e:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d03f      	beq.n	8000fd8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	6859      	ldr	r1, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	035b      	lsls	r3, r3, #13
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d108      	bne.n	8000f92 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8000f92:	2300      	movs	r3, #0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d15c      	bne.n	8001052 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d107      	bne.n	8000fb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8000fb4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d14b      	bne.n	8001052 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000fc2:	f023 030f 	bic.w	r3, r3, #15
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	6811      	ldr	r1, [r2, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	6892      	ldr	r2, [r2, #8]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fd4:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000fd6:	e03c      	b.n	8001052 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fe2:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d108      	bne.n	8001004 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001004:	2300      	movs	r3, #0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d123      	bne.n	8001052 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d107      	bne.n	8001026 <HAL_ADCEx_MultiModeConfigChannel+0x186>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADCEx_MultiModeConfigChannel+0x186>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001026:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001028:	2b00      	cmp	r3, #0
 800102a:	d112      	bne.n	8001052 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800102c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001034:	f023 030f 	bic.w	r3, r3, #15
 8001038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800103a:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800103c:	e009      	b.n	8001052 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f043 0220 	orr.w	r2, r3, #32
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001050:	e000      	b.n	8001054 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001052:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800105c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001060:	4618      	mov	r0, r3
 8001062:	376c      	adds	r7, #108	; 0x6c
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	50000100 	.word	0x50000100
 8001070:	50000400 	.word	0x50000400
 8001074:	50000500 	.word	0x50000500
 8001078:	50000300 	.word	0x50000300
 800107c:	50000700 	.word	0x50000700

08001080 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001096:	2b00      	cmp	r3, #0
 8001098:	d126      	bne.n	80010e8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d115      	bne.n	80010e0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	69db      	ldr	r3, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d111      	bne.n	80010e0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff f8d7 	bl	8000294 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80010e6:	e004      	b.n	80010f2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	4798      	blx	r3
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff f8cd 	bl	80002a8 <HAL_ADC_ConvHalfCpltCallback>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001134:	f043 0204 	orr.w	r2, r3, #4
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff f8bd 	bl	80002bc <HAL_ADC_ErrorCallback>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <ADC_Enable+0x2c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <ADC_Enable+0x2c>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <ADC_Enable+0x2e>
 8001178:	2300      	movs	r3, #0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d13c      	bne.n	80011f8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <ADC_Enable+0xb8>)
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00d      	beq.n	80011a8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	f043 0210 	orr.w	r2, r3, #16
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e028      	b.n	80011fa <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0201 	orr.w	r2, r2, #1
 80011b6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80011b8:	f7ff f860 	bl	800027c <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011be:	e014      	b.n	80011ea <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011c0:	f7ff f85c 	bl	800027c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d90d      	bls.n	80011ea <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f043 0210 	orr.w	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e007      	b.n	80011fa <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d1e3      	bne.n	80011c0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	8000003f 	.word	0x8000003f

08001208 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <ADC_Disable+0x2c>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <ADC_Disable+0x2c>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <ADC_Disable+0x2e>
 8001234:	2300      	movs	r3, #0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d040      	beq.n	80012bc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030d 	and.w	r3, r3, #13
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10f      	bne.n	8001268 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0202 	orr.w	r2, r2, #2
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2203      	movs	r2, #3
 800125e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001260:	f7ff f80c 	bl	800027c <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001266:	e022      	b.n	80012ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f043 0210 	orr.w	r2, r3, #16
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e01c      	b.n	80012be <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001284:	f7fe fffa 	bl	800027c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d90d      	bls.n	80012ae <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f043 0210 	orr.w	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e007      	b.n	80012be <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d0e3      	beq.n	8001284 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <NVIC_EnableIRQ+0x30>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da0b      	bge.n	800138c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <NVIC_SetPriority+0x4c>)
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 030f 	and.w	r3, r3, #15
 8001380:	3b04      	subs	r3, #4
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138a:	e009      	b.n	80013a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <NVIC_SetPriority+0x50>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff2d 	bl	80012c8 <NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff42 	bl	8001310 <NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff35 	bl	800132c <NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e037      	b.n	8001568 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800150e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800151c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f940 	bl	80017d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}  
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_DMA_Start_IT+0x20>
 800158c:	2302      	movs	r3, #2
 800158e:	e04a      	b.n	8001626 <HAL_DMA_Start_IT+0xb6>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d13a      	bne.n	8001618 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f8d4 	bl	8001774 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 020e 	orr.w	r2, r2, #14
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e00f      	b.n	8001606 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 020a 	orr.w	r2, r2, #10
 80015f4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0204 	bic.w	r2, r2, #4
 8001604:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e005      	b.n	8001624 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001620:	2302      	movs	r3, #2
 8001622:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001624:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	2204      	movs	r2, #4
 800164c:	409a      	lsls	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d024      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x72>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01f      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	2b00      	cmp	r3, #0
 800166c:	d107      	bne.n	800167e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0204 	bic.w	r2, r2, #4
 800167c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2104      	movs	r1, #4
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d06a      	beq.n	800176c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800169e:	e065      	b.n	800176c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2202      	movs	r2, #2
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02c      	beq.n	800170a <HAL_DMA_IRQHandler+0xdc>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d027      	beq.n	800170a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10b      	bne.n	80016e0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020a 	bic.w	r2, r2, #10
 80016d6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	2102      	movs	r1, #2
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d035      	beq.n	800176c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001708:	e030      	b.n	800176c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	2208      	movs	r2, #8
 8001710:	409a      	lsls	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d028      	beq.n	800176c <HAL_DMA_IRQHandler+0x13e>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020e 	bic.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
    }
  }
}  
 800176a:	e7ff      	b.n	800176c <HAL_DMA_IRQHandler+0x13e>
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f202 	lsl.w	r2, r1, r2
 8001790:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d108      	bne.n	80017b4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017b2:	e007      	b.n	80017c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <DMA_CalcBaseAndBitshift+0x60>)
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d80f      	bhi.n	8001804 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <DMA_CalcBaseAndBitshift+0x64>)
 80017ec:	4413      	add	r3, r2
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <DMA_CalcBaseAndBitshift+0x68>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	009a      	lsls	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <DMA_CalcBaseAndBitshift+0x6c>)
 8001800:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001802:	e00e      	b.n	8001822 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <DMA_CalcBaseAndBitshift+0x70>)
 800180c:	4413      	add	r3, r2
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <DMA_CalcBaseAndBitshift+0x68>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	009a      	lsls	r2, r3, #2
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <DMA_CalcBaseAndBitshift+0x74>)
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40020407 	.word	0x40020407
 8001834:	bffdfff8 	.word	0xbffdfff8
 8001838:	cccccccd 	.word	0xcccccccd
 800183c:	40020000 	.word	0x40020000
 8001840:	bffdfbf8 	.word	0xbffdfbf8
 8001844:	40020400 	.word	0x40020400

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800185e:	e154      	b.n	8001b0a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8146 	beq.w	8001b04 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x40>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d123      	bne.n	80018d0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3208      	adds	r2, #8
 8001890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	6939      	ldr	r1, [r7, #16]
 80018cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0203 	and.w	r2, r3, #3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d00b      	beq.n	8001924 <HAL_GPIO_Init+0xdc>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001918:	2b11      	cmp	r3, #17
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b12      	cmp	r3, #18
 8001922:	d130      	bne.n	8001986 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195a:	2201      	movs	r2, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 0201 	and.w	r2, r3, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a0 	beq.w	8001b04 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_GPIO_Init+0x2e0>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a57      	ldr	r2, [pc, #348]	; (8001b28 <HAL_GPIO_Init+0x2e0>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <HAL_GPIO_Init+0x2e0>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80019dc:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a06:	d019      	beq.n	8001a3c <HAL_GPIO_Init+0x1f4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <HAL_GPIO_Init+0x2e8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1f0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2ec>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1ec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1e8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a46      	ldr	r2, [pc, #280]	; (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1e4>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0x1f6>
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x1f6>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1f6>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1f6>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1f6>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a5c:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a80:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f aea3 	bne.w	8001860 <HAL_GPIO_Init+0x18>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f000 beda 	b.w	8002912 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 816e 	beq.w	8001e4a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b6e:	4bb5      	ldr	r3, [pc, #724]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d00c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b7a:	4bb2      	ldr	r3, [pc, #712]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d15a      	bne.n	8001c3c <HAL_RCC_OscConfig+0xf8>
 8001b86:	4baf      	ldr	r3, [pc, #700]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d153      	bne.n	8001c3c <HAL_RCC_OscConfig+0xf8>
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ba8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x82>
 8001bc0:	4ba0      	ldr	r3, [pc, #640]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0xae>
 8001bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bde:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001be2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bee:	4b95      	ldr	r3, [pc, #596]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001bfa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001bfe:	fa92 f2a2 	rbit	r2, r2
 8001c02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001c06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b252      	sxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b252      	sxtb	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 810f 	beq.w	8001e48 <HAL_RCC_OscConfig+0x304>
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 8109 	bne.w	8001e48 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f000 be6b 	b.w	8002912 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x112>
 8001c48:	4b7e      	ldr	r3, [pc, #504]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a7d      	ldr	r2, [pc, #500]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e030      	b.n	8001cb8 <HAL_RCC_OscConfig+0x174>
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x136>
 8001c60:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b75      	ldr	r3, [pc, #468]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a74      	ldr	r2, [pc, #464]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e01e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x174>
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x15c>
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6b      	ldr	r2, [pc, #428]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x174>
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a67      	ldr	r2, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb8:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f023 020f 	bic.w	r2, r3, #15
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	495f      	ldr	r1, [pc, #380]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d05a      	beq.n	8001d8c <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fad1 	bl	800027c <HAL_GetTick>
 8001cda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7fe facc 	bl	800027c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b64      	cmp	r3, #100	; 0x64
 8001cee:	d902      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	f000 be0e 	b.w	8002912 <HAL_RCC_OscConfig+0xdce>
 8001cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001d0a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1e4>
 8001d22:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	e015      	b.n	8001d54 <HAL_RCC_OscConfig+0x210>
 8001d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d44:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d58:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d5c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d60:	fa92 f2a2 	rbit	r2, r2
 8001d64:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001d68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	b252      	sxtb	r2, r2
 8001d72:	f042 0220 	orr.w	r2, r2, #32
 8001d76:	b252      	sxtb	r2, r2
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0aa      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x19c>
 8001d8a:	e05e      	b.n	8001e4a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fa76 	bl	800027c <HAL_GetTick>
 8001d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d96:	f7fe fa71 	bl	800027c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d902      	bls.n	8001dac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	f000 bdb3 	b.w	8002912 <HAL_RCC_OscConfig+0xdce>
 8001dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001dc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <HAL_RCC_OscConfig+0x29a>
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x2c6>
 8001dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001dfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_RCC_OscConfig+0x300>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e0e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e12:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e16:	fa92 f2a2 	rbit	r2, r2
 8001e1a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001e1e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b252      	sxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b252      	sxtb	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f002 021f 	and.w	r2, r2, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1aa      	bne.n	8001d96 <HAL_RCC_OscConfig+0x252>
 8001e40:	e003      	b.n	8001e4a <HAL_RCC_OscConfig+0x306>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8170 	beq.w	800213a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e5a:	4bd0      	ldr	r3, [pc, #832]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e66:	4bcd      	ldr	r3, [pc, #820]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d16d      	bne.n	8001f4e <HAL_RCC_OscConfig+0x40a>
 8001e72:	4bca      	ldr	r3, [pc, #808]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d167      	bne.n	8001f4e <HAL_RCC_OscConfig+0x40a>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001e90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_OscConfig+0x36a>
 8001ea8:	4bbc      	ldr	r3, [pc, #752]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	e013      	b.n	8001ed6 <HAL_RCC_OscConfig+0x392>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ec6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ed2:	4bb2      	ldr	r3, [pc, #712]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001edc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ee0:	fa92 f2a2 	rbit	r2, r2
 8001ee4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001ee8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001eec:	fab2 f282 	clz	r2, r2
 8001ef0:	b252      	sxtb	r2, r2
 8001ef2:	f042 0220 	orr.w	r2, r2, #32
 8001ef6:	b252      	sxtb	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3d6>
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d002      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f000 bcfc 	b.w	8002912 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4ba0      	ldr	r3, [pc, #640]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6959      	ldr	r1, [r3, #20]
 8001f28:	23f8      	movs	r3, #248	; 0xf8
 8001f2a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001f3a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	4995      	ldr	r1, [pc, #596]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4c:	e0f5      	b.n	800213a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8085 	beq.w	8002064 <HAL_RCC_OscConfig+0x520>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001f6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2301      	movs	r3, #1
 8001f82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe f97a 	bl	800027c <HAL_GetTick>
 8001f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe f975 	bl	800027c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d902      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f000 bcb7 	b.w	8002912 <HAL_RCC_OscConfig+0xdce>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001fb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x490>
 8001fce:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	e013      	b.n	8001ffc <HAL_RCC_OscConfig+0x4b8>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fec:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002002:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800200e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	b252      	sxtb	r2, r2
 8002018:	f042 0220 	orr.w	r2, r2, #32
 800201c:	b252      	sxtb	r2, r2
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ae      	beq.n	8001f8e <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6959      	ldr	r1, [r3, #20]
 800203e:	23f8      	movs	r3, #248	; 0xf8
 8002040:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002050:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	494f      	ldr	r1, [pc, #316]	; (800219c <HAL_RCC_OscConfig+0x658>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
 8002062:	e06a      	b.n	800213a <HAL_RCC_OscConfig+0x5f6>
 8002064:	2301      	movs	r3, #1
 8002066:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8002076:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002082:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	461a      	mov	r2, r3
 800208a:	2300      	movs	r3, #0
 800208c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe f8f5 	bl	800027c <HAL_GetTick>
 8002092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002098:	f7fe f8f0 	bl	800027c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d902      	bls.n	80020ae <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	f000 bc32 	b.w	8002912 <HAL_RCC_OscConfig+0xdce>
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80020c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0x59a>
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x658>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0x5c2>
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_OscConfig+0x658>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2202      	movs	r2, #2
 8002108:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800210c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8002118:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b252      	sxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b252      	sxtb	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ae      	bne.n	8002098 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80d8 	beq.w	80022fa <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d067      	beq.n	8002224 <HAL_RCC_OscConfig+0x6e0>
 8002154:	2301      	movs	r3, #1
 8002156:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8002166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x65c>)
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	2301      	movs	r3, #1
 800217a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe f87e 	bl	800027c <HAL_GetTick>
 8002180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	e00e      	b.n	80021a4 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002186:	f7fe f879 	bl	800027c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d906      	bls.n	80021a4 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e3bb      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	10908120 	.word	0x10908120
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80021b6:	2302      	movs	r3, #2
 80021b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021c0:	fa93 f2a3 	rbit	r2, r3
 80021c4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021ce:	2202      	movs	r2, #2
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	4ba5      	ldr	r3, [pc, #660]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80021e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021ea:	2102      	movs	r1, #2
 80021ec:	6019      	str	r1, [r3, #0]
 80021ee:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f1a3 	rbit	r1, r3
 80021f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021fc:	6019      	str	r1, [r3, #0]
  return(result);
 80021fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b25b      	sxtb	r3, r3
 800220a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800220e:	b25b      	sxtb	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0b1      	beq.n	8002186 <HAL_RCC_OscConfig+0x642>
 8002222:	e06a      	b.n	80022fa <HAL_RCC_OscConfig+0x7b6>
 8002224:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800223a:	601a      	str	r2, [r3, #0]
  return(result);
 800223c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002240:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4b8c      	ldr	r3, [pc, #560]	; (800247c <HAL_RCC_OscConfig+0x938>)
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7fe f812 	bl	800027c <HAL_GetTick>
 8002258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	e009      	b.n	8002272 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe f80d 	bl	800027c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e34f      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
 8002272:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002276:	2202      	movs	r2, #2
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800228e:	2202      	movs	r2, #2
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	fa93 f2a3 	rbit	r2, r3
 800229c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80022bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022c2:	2102      	movs	r1, #2
 80022c4:	6019      	str	r1, [r3, #0]
 80022c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f1a3 	rbit	r1, r3
 80022d0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022d4:	6019      	str	r1, [r3, #0]
  return(result);
 80022d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1b1      	bne.n	800225e <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8159 	beq.w	80025bc <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d112      	bne.n	8002342 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b56      	ldr	r3, [pc, #344]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4a55      	ldr	r2, [pc, #340]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	61d3      	str	r3, [r2, #28]
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_RCC_OscConfig+0x93c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11a      	bne.n	8002384 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <HAL_RCC_OscConfig+0x93c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4b      	ldr	r2, [pc, #300]	; (8002480 <HAL_RCC_OscConfig+0x93c>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fd ff8f 	bl	800027c <HAL_GetTick>
 800235e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	e009      	b.n	8002378 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002364:	f7fd ff8a 	bl	800027c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	; 0x64
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e2cc      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_RCC_OscConfig+0x93c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ef      	beq.n	8002364 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x858>
 800238e:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a39      	ldr	r2, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	e02f      	b.n	80023fc <HAL_RCC_OscConfig+0x8b8>
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x87c>
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a33      	ldr	r2, [pc, #204]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a30      	ldr	r2, [pc, #192]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0x8b8>
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x8a0>
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0x8b8>
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a23      	ldr	r2, [pc, #140]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a20      	ldr	r2, [pc, #128]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 80023f6:	f023 0304 	bic.w	r3, r3, #4
 80023fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d06b      	beq.n	80024de <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fd ff39 	bl	800027c <HAL_GetTick>
 800240a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fd ff34 	bl	800027c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e274      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
 8002428:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800242c:	2202      	movs	r2, #2
 800242e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002444:	2202      	movs	r2, #2
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002456:	601a      	str	r2, [r3, #0]
  return(result);
 8002458:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800245c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d108      	bne.n	8002484 <HAL_RCC_OscConfig+0x940>
 8002472:	4b01      	ldr	r3, [pc, #4]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	e013      	b.n	80024a0 <HAL_RCC_OscConfig+0x95c>
 8002478:	40021000 	.word	0x40021000
 800247c:	10908120 	.word	0x10908120
 8002480:	40007000 	.word	0x40007000
 8002484:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	4bbb      	ldr	r3, [pc, #748]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024a4:	2102      	movs	r1, #2
 80024a6:	6011      	str	r1, [r2, #0]
 80024a8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	fa92 f1a2 	rbit	r1, r2
 80024b2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024b6:	6011      	str	r1, [r2, #0]
  return(result);
 80024b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b252      	sxtb	r2, r2
 80024c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c8:	b252      	sxtb	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f002 021f 	and.w	r2, r2, #31
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d099      	beq.n	8002410 <HAL_RCC_OscConfig+0x8cc>
 80024dc:	e064      	b.n	80025a8 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fd fecd 	bl	800027c <HAL_GetTick>
 80024e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fd fec8 	bl	800027c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e208      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
 8002500:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002504:	2202      	movs	r2, #2
 8002506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800251c:	2202      	movs	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800252e:	601a      	str	r2, [r3, #0]
  return(result);
 8002530:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002534:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d102      	bne.n	8002550 <HAL_RCC_OscConfig+0xa0c>
 800254a:	4b90      	ldr	r3, [pc, #576]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	e00d      	b.n	800256c <HAL_RCC_OscConfig+0xa28>
 8002550:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002554:	2202      	movs	r2, #2
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002570:	2102      	movs	r1, #2
 8002572:	6011      	str	r1, [r2, #0]
 8002574:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	fa92 f1a2 	rbit	r1, r2
 800257e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002582:	6011      	str	r1, [r2, #0]
  return(result);
 8002584:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b252      	sxtb	r2, r2
 8002590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002594:	b252      	sxtb	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d19f      	bne.n	80024e8 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 81a4 	beq.w	8002910 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b70      	ldr	r3, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	f000 819b 	beq.w	800290c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	f040 8113 	bne.w	8002808 <HAL_RCC_OscConfig+0xcc4>
 80025e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025fa:	601a      	str	r2, [r3, #0]
  return(result);
 80025fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002600:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800260a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	461a      	mov	r2, r3
 8002612:	2300      	movs	r3, #0
 8002614:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fd fe31 	bl	800027c <HAL_GetTick>
 800261a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	e009      	b.n	8002634 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7fd fe2c 	bl	800027c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e16e      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
 8002634:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800264c:	601a      	str	r2, [r3, #0]
  return(result);
 800264e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002652:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_RCC_OscConfig+0xb2a>
 8002668:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	e01b      	b.n	80026a6 <HAL_RCC_OscConfig+0xb62>
 800266e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800268c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	4b3a      	ldr	r3, [pc, #232]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026ae:	6011      	str	r1, [r2, #0]
 80026b0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	fa92 f1a2 	rbit	r1, r2
 80026ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026be:	6011      	str	r1, [r2, #0]
  return(result);
 80026c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	b252      	sxtb	r2, r2
 80026cc:	f042 0220 	orr.w	r2, r2, #32
 80026d0:	b252      	sxtb	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d19d      	bne.n	8002620 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	4924      	ldr	r1, [pc, #144]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002718:	601a      	str	r2, [r3, #0]
  return(result);
 800271a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800271e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002728:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	461a      	mov	r2, r3
 8002730:	2301      	movs	r3, #1
 8002732:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fd fda2 	bl	800027c <HAL_GetTick>
 8002738:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273c:	e009      	b.n	8002752 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7fd fd9d 	bl	800027c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0df      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
 8002752:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800276a:	601a      	str	r2, [r3, #0]
  return(result);
 800276c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d104      	bne.n	8002790 <HAL_RCC_OscConfig+0xc4c>
 8002786:	4b01      	ldr	r3, [pc, #4]	; (800278c <HAL_RCC_OscConfig+0xc48>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xc84>
 800278c:	40021000 	.word	0x40021000
 8002790:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	4b55      	ldr	r3, [pc, #340]	; (800291c <HAL_RCC_OscConfig+0xdd8>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d0:	6011      	str	r1, [r2, #0]
 80027d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027e0:	6011      	str	r1, [r2, #0]
  return(result);
 80027e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	fab2 f282 	clz	r2, r2
 80027ec:	b252      	sxtb	r2, r2
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	b252      	sxtb	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f002 021f 	and.w	r2, r2, #31
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d09b      	beq.n	800273e <HAL_RCC_OscConfig+0xbfa>
 8002806:	e083      	b.n	8002910 <HAL_RCC_OscConfig+0xdcc>
 8002808:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800280c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002820:	601a      	str	r2, [r3, #0]
  return(result);
 8002822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002826:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	461a      	mov	r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fd fd1e 	bl	800027c <HAL_GetTick>
 8002840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002844:	e009      	b.n	800285a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002846:	f7fd fd19 	bl	800027c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e05b      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002872:	601a      	str	r2, [r3, #0]
  return(result);
 8002874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002878:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d102      	bne.n	8002894 <HAL_RCC_OscConfig+0xd50>
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_RCC_OscConfig+0xdd8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e01b      	b.n	80028cc <HAL_RCC_OscConfig+0xd88>
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fa93 f2a3 	rbit	r2, r3
 80028a8:	f107 0320 	add.w	r3, r7, #32
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fa93 f2a3 	rbit	r2, r3
 80028c2:	f107 0318 	add.w	r3, r7, #24
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_RCC_OscConfig+0xdd8>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f107 0214 	add.w	r2, r7, #20
 80028d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028d4:	6011      	str	r1, [r2, #0]
 80028d6:	f107 0214 	add.w	r2, r7, #20
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	fa92 f1a2 	rbit	r1, r2
 80028e0:	f107 0210 	add.w	r2, r7, #16
 80028e4:	6011      	str	r1, [r2, #0]
  return(result);
 80028e6:	f107 0210 	add.w	r2, r7, #16
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b252      	sxtb	r2, r2
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	b252      	sxtb	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f002 021f 	and.w	r2, r2, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d19d      	bne.n	8002846 <HAL_RCC_OscConfig+0xd02>
 800290a:	e001      	b.n	8002910 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b09e      	sub	sp, #120	; 0x78
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e164      	b.n	8002c02 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b92      	ldr	r3, [pc, #584]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d910      	bls.n	8002968 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b8f      	ldr	r3, [pc, #572]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0207 	bic.w	r2, r3, #7
 800294e:	498d      	ldr	r1, [pc, #564]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b8b      	ldr	r3, [pc, #556]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e14c      	b.n	8002c02 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b84      	ldr	r3, [pc, #528]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4981      	ldr	r1, [pc, #516]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80df 	beq.w	8002b52 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d13d      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
 800299c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80029aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xa6>
 80029c0:	4b71      	ldr	r3, [pc, #452]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e00f      	b.n	80029e6 <HAL_RCC_ClockConfig+0xc6>
 80029c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	667b      	str	r3, [r7, #100]	; 0x64
 80029d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d8:	663b      	str	r3, [r7, #96]	; 0x60
 80029da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029e2:	4b69      	ldr	r3, [pc, #420]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80029ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029ee:	fa92 f2a2 	rbit	r2, r2
 80029f2:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80029f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029f6:	fab2 f282 	clz	r2, r2
 80029fa:	b252      	sxtb	r2, r2
 80029fc:	f042 0220 	orr.w	r2, r2, #32
 8002a00:	b252      	sxtb	r2, r2
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d17d      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0f4      	b.n	8002c02 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d13d      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x17c>
 8002a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x12a>
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e00f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x14a>
 8002a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	647b      	str	r3, [r7, #68]	; 0x44
 8002a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a66:	4b48      	ldr	r3, [pc, #288]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a6e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b252      	sxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b252      	sxtb	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f002 021f 	and.w	r2, r2, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d13b      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b2      	b.n	8002c02 <HAL_RCC_ClockConfig+0x2e2>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x1a4>
 8002abe:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e00d      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1c0>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	61ba      	str	r2, [r7, #24]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	fa92 f2a2 	rbit	r2, r2
 8002aea:	617a      	str	r2, [r7, #20]
  return(result);
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	fab2 f282 	clz	r2, r2
 8002af2:	b252      	sxtb	r2, r2
 8002af4:	f042 0220 	orr.w	r2, r2, #32
 8002af8:	b252      	sxtb	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f002 021f 	and.w	r2, r2, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e078      	b.n	8002c02 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 0203 	bic.w	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	491a      	ldr	r1, [pc, #104]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b22:	f7fd fbab 	bl	800027c <HAL_GetTick>
 8002b26:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2a:	f7fd fba7 	bl	800027c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e060      	b.n	8002c02 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_RCC_ClockConfig+0x268>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 020c 	and.w	r2, r3, #12
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d1eb      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d215      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 0207 	bic.w	r2, r3, #7
 8002b68:	4906      	ldr	r1, [pc, #24]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <HAL_RCC_ClockConfig+0x264>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d006      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e03f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x2e2>
 8002b82:	bf00      	nop
 8002b84:	40022000 	.word	0x40022000
 8002b88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_RCC_ClockConfig+0x2ec>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4919      	ldr	r1, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x2ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_RCC_ClockConfig+0x2ec>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4911      	ldr	r1, [pc, #68]	; (8002c0c <HAL_RCC_ClockConfig+0x2ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bca:	f000 f825 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x2ec>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bd8:	23f0      	movs	r3, #240	; 0xf0
 8002bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <HAL_RCC_ClockConfig+0x2f0>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_RCC_ClockConfig+0x2f4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd fafa 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3778      	adds	r7, #120	; 0x78
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08003834 	.word	0x08003834
 8002c14:	20000008 	.word	0x20000008

08002c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b08b      	sub	sp, #44	; 0x2c
 8002c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x30>
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x36>
 8002c46:	e03c      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c4a:	623b      	str	r3, [r7, #32]
      break;
 8002c4c:	e03c      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c54:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002c58:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	607b      	str	r3, [r7, #4]
  return(result);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	230f      	movs	r3, #15
 8002c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb0:	e004      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	623b      	str	r3, [r7, #32]
      break;
 8002cc0:	e002      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cc4:	623b      	str	r3, [r7, #32]
      break;
 8002cc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	372c      	adds	r7, #44	; 0x2c
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	007a1200 	.word	0x007a1200
 8002ce0:	08003814 	.word	0x08003814
 8002ce4:	08003824 	.word	0x08003824
 8002ce8:	003d0900 	.word	0x003d0900

08002cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e01d      	b.n	8002d3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fc7c 	bl	8003610 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f000 f8ec 	bl	8002f08 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_ConfigClockSource+0x1c>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0cf      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x1bc>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d88:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d07c      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x152>
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d80f      	bhi.n	8002dbe <HAL_TIM_ConfigClockSource+0x7c>
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	f000 808f 	beq.w	8002ec2 <HAL_TIM_ConfigClockSource+0x180>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d803      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x6e>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8083 	beq.w	8002eb4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8002dae:	e09d      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f000 808d 	beq.w	8002ed0 <HAL_TIM_ConfigClockSource+0x18e>
 8002db6:	2b30      	cmp	r3, #48	; 0x30
 8002db8:	f000 8091 	beq.w	8002ede <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8002dbc:	e096      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002dbe:	2b70      	cmp	r3, #112	; 0x70
 8002dc0:	d018      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0xb2>
 8002dc2:	2b70      	cmp	r3, #112	; 0x70
 8002dc4:	d804      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x8e>
 8002dc6:	2b50      	cmp	r3, #80	; 0x50
 8002dc8:	d044      	beq.n	8002e54 <HAL_TIM_ConfigClockSource+0x112>
 8002dca:	2b60      	cmp	r3, #96	; 0x60
 8002dcc:	d052      	beq.n	8002e74 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8002dce:	e08d      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x9c>
 8002dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dda:	d028      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8002ddc:	e086      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dec:	f023 0307 	bic.w	r3, r3, #7
 8002df0:	6093      	str	r3, [r2, #8]
    break;
 8002df2:	e07b      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f000 f999 	bl	800313a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	609a      	str	r2, [r3, #8]
    break;
 8002e2c:	e05e      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f000 f97c 	bl	800313a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e50:	609a      	str	r2, [r3, #8]
    break;
 8002e52:	e04b      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f000 f8e3 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2150      	movs	r1, #80	; 0x50
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f944 	bl	80030fa <TIM_ITRx_SetConfig>
    break;
 8002e72:	e03b      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f000 f906 	bl	8003092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2160      	movs	r1, #96	; 0x60
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f934 	bl	80030fa <TIM_ITRx_SetConfig>
    break;
 8002e92:	e02b      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f000 f8c3 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2140      	movs	r1, #64	; 0x40
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f924 	bl	80030fa <TIM_ITRx_SetConfig>
    break;
 8002eb2:	e01b      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f91d 	bl	80030fa <TIM_ITRx_SetConfig>
    break;
 8002ec0:	e014      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2110      	movs	r1, #16
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f916 	bl	80030fa <TIM_ITRx_SetConfig>
    break;
 8002ece:	e00d      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f90f 	bl	80030fa <TIM_ITRx_SetConfig>
    break;
 8002edc:	e006      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2130      	movs	r1, #48	; 0x30
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f908 	bl	80030fa <TIM_ITRx_SetConfig>
    break;
 8002eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <TIM_Base_SetConfig+0x108>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0x3c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x3c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a39      	ldr	r2, [pc, #228]	; (8003014 <TIM_Base_SetConfig+0x10c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x3c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a38      	ldr	r2, [pc, #224]	; (8003018 <TIM_Base_SetConfig+0x110>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x3c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a37      	ldr	r2, [pc, #220]	; (800301c <TIM_Base_SetConfig+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <TIM_Base_SetConfig+0x108>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01b      	beq.n	8002f96 <TIM_Base_SetConfig+0x8e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d017      	beq.n	8002f96 <TIM_Base_SetConfig+0x8e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <TIM_Base_SetConfig+0x10c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <TIM_Base_SetConfig+0x8e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a29      	ldr	r2, [pc, #164]	; (8003018 <TIM_Base_SetConfig+0x110>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0x8e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <TIM_Base_SetConfig+0x114>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x8e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a27      	ldr	r2, [pc, #156]	; (8003020 <TIM_Base_SetConfig+0x118>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x8e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <TIM_Base_SetConfig+0x11c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x8e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a25      	ldr	r2, [pc, #148]	; (8003028 <TIM_Base_SetConfig+0x120>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <TIM_Base_SetConfig+0x108>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00f      	beq.n	8002ff4 <TIM_Base_SetConfig+0xec>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a11      	ldr	r2, [pc, #68]	; (800301c <TIM_Base_SetConfig+0x114>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <TIM_Base_SetConfig+0xec>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <TIM_Base_SetConfig+0x118>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d007      	beq.n	8002ff4 <TIM_Base_SetConfig+0xec>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <TIM_Base_SetConfig+0x11c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <TIM_Base_SetConfig+0xec>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <TIM_Base_SetConfig+0x120>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d103      	bne.n	8002ffc <TIM_Base_SetConfig+0xf4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	615a      	str	r2, [r3, #20]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40013400 	.word	0x40013400
 8003020:	40014000 	.word	0x40014000
 8003024:	40014400 	.word	0x40014400
 8003028:	40014800 	.word	0x40014800

0800302c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f023 030a 	bic.w	r3, r3, #10
 8003070:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b087      	sub	sp, #28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0210 	bic.w	r2, r3, #16
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	031b      	lsls	r3, r3, #12
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	f043 0307 	orr.w	r3, r3, #7
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	609a      	str	r2, [r3, #8]
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800313a:	b480      	push	{r7}
 800313c:	b087      	sub	sp, #28
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003158:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	609a      	str	r2, [r3, #8]
} 
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e03d      	b.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
} 
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40013400 	.word	0x40013400

08003228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800322c:	f7fc ffcc 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003230:	f000 f812 	bl	8003258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003234:	f000 f940 	bl	80034b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003238:	f000 f920 	bl	800347c <MX_DMA_Init>
  MX_ADC1_Init();
 800323c:	f000 f848 	bl	80032d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003240:	f000 f8d0 	bl	80033e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1,(uint32_t *)values,3);
 8003244:	2203      	movs	r2, #3
 8003246:	4902      	ldr	r1, [pc, #8]	; (8003250 <main+0x28>)
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <main+0x2c>)
 800324a:	f7fd fa21 	bl	8000690 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800324e:	e7fe      	b.n	800324e <main+0x26>
 8003250:	2000002c 	.word	0x2000002c
 8003254:	20000034 	.word	0x20000034

08003258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b090      	sub	sp, #64	; 0x40
 800325c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325e:	f107 0318 	add.w	r3, r7, #24
 8003262:	2228      	movs	r2, #40	; 0x28
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fac0 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800327a:	2302      	movs	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800327e:	2301      	movs	r3, #1
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003282:	2310      	movs	r3, #16
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003286:	2300      	movs	r3, #0
 8003288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800328a:	f107 0318 	add.w	r3, r7, #24
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fc58 	bl	8001b44 <HAL_RCC_OscConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800329a:	f000 f925 	bl	80034e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800329e:	230f      	movs	r3, #15
 80032a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fb32 	bl	8002920 <HAL_RCC_ClockConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80032c2:	f000 f911 	bl	80034e8 <Error_Handler>
  }
}
 80032c6:	bf00      	nop
 80032c8:	3740      	adds	r7, #64	; 0x40
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
 80032f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <MX_ADC1_Init+0x110>)
 80032f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80032f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80032fa:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <MX_ADC1_Init+0x110>)
 80032fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <MX_ADC1_Init+0x110>)
 800330a:	2201      	movs	r2, #1
 800330c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800330e:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003310:	2201      	movs	r2, #1
 8003312:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <MX_ADC1_Init+0x110>)
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003322:	2201      	movs	r2, #1
 8003324:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003326:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003328:	2200      	movs	r2, #0
 800332a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <MX_ADC1_Init+0x110>)
 800332e:	2203      	movs	r2, #3
 8003330:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003334:	2201      	movs	r2, #1
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <MX_ADC1_Init+0x110>)
 800333a:	2204      	movs	r2, #4
 800333c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003346:	2200      	movs	r2, #0
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800334a:	4825      	ldr	r0, [pc, #148]	; (80033e0 <MX_ADC1_Init+0x110>)
 800334c:	f7fc ffc0 	bl	80002d0 <HAL_ADC_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003356:	f000 f8c7 	bl	80034e8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4619      	mov	r1, r3
 8003364:	481e      	ldr	r0, [pc, #120]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003366:	f7fd fd9b 	bl	8000ea0 <HAL_ADCEx_MultiModeConfigChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8003370:	f000 f8ba 	bl	80034e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003374:	2301      	movs	r3, #1
 8003376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003378:	2301      	movs	r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8003380:	2305      	movs	r3, #5
 8003382:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4813      	ldr	r0, [pc, #76]	; (80033e0 <MX_ADC1_Init+0x110>)
 8003392:	f7fd fa99 	bl	80008c8 <HAL_ADC_ConfigChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800339c:	f000 f8a4 	bl	80034e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80033a0:	2302      	movs	r3, #2
 80033a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80033a4:	2302      	movs	r3, #2
 80033a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	480c      	ldr	r0, [pc, #48]	; (80033e0 <MX_ADC1_Init+0x110>)
 80033ae:	f7fd fa8b 	bl	80008c8 <HAL_ADC_ConfigChannel>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80033b8:	f000 f896 	bl	80034e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80033bc:	2303      	movs	r3, #3
 80033be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80033c0:	2303      	movs	r3, #3
 80033c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4805      	ldr	r0, [pc, #20]	; (80033e0 <MX_ADC1_Init+0x110>)
 80033ca:	f7fd fa7d 	bl	80008c8 <HAL_ADC_ConfigChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80033d4:	f000 f888 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033d8:	bf00      	nop
 80033da:	3728      	adds	r7, #40	; 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000034 	.word	0x20000034

080033e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <MX_TIM2_Init+0x94>)
 8003404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <MX_TIM2_Init+0x94>)
 800340c:	2200      	movs	r2, #0
 800340e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <MX_TIM2_Init+0x94>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003416:	4b18      	ldr	r3, [pc, #96]	; (8003478 <MX_TIM2_Init+0x94>)
 8003418:	2200      	movs	r2, #0
 800341a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <MX_TIM2_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <MX_TIM2_Init+0x94>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003428:	4813      	ldr	r0, [pc, #76]	; (8003478 <MX_TIM2_Init+0x94>)
 800342a:	f7ff fc5f 	bl	8002cec <HAL_TIM_Base_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003434:	f000 f858 	bl	80034e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800343e:	f107 0310 	add.w	r3, r7, #16
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <MX_TIM2_Init+0x94>)
 8003446:	f7ff fc7c 	bl	8002d42 <HAL_TIM_ConfigClockSource>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003450:	f000 f84a 	bl	80034e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_TIM2_Init+0x94>)
 8003462:	f7ff fe8d 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800346c:	f000 f83c 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200000cc 	.word	0x200000cc

0800347c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_DMA_Init+0x38>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <MX_DMA_Init+0x38>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6153      	str	r3, [r2, #20]
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_DMA_Init+0x38>)
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	200b      	movs	r0, #11
 80034a0:	f7fd ffe9 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80034a4:	200b      	movs	r0, #11
 80034a6:	f7fe f802 	bl	80014ae <HAL_NVIC_EnableIRQ>

}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000

080034b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <MX_GPIO_Init+0x2c>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <MX_GPIO_Init+0x2c>)
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	6153      	str	r3, [r2, #20]
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <MX_GPIO_Init+0x2c>)
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]

}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_MspInit+0x44>)
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	4a0e      	ldr	r2, [pc, #56]	; (800353c <HAL_MspInit+0x44>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6193      	str	r3, [r2, #24]
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_MspInit+0x44>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_MspInit+0x44>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_MspInit+0x44>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	61d3      	str	r3, [r2, #28]
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_MspInit+0x44>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003560:	d14c      	bne.n	80035fc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_ADC_MspInit+0xc4>)
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4a27      	ldr	r2, [pc, #156]	; (8003604 <HAL_ADC_MspInit+0xc4>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6153      	str	r3, [r2, #20]
 800356e:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_ADC_MspInit+0xc4>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_ADC_MspInit+0xc4>)
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	4a21      	ldr	r2, [pc, #132]	; (8003604 <HAL_ADC_MspInit+0xc4>)
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	6153      	str	r3, [r2, #20]
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_ADC_MspInit+0xc4>)
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003592:	2307      	movs	r3, #7
 8003594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003596:	2303      	movs	r3, #3
 8003598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4619      	mov	r1, r3
 80035a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a8:	f7fe f94e 	bl	8001848 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_ADC_MspInit+0xcc>)
 80035b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035d6:	2220      	movs	r2, #32
 80035d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035e0:	4809      	ldr	r0, [pc, #36]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035e2:	f7fd ff7e 	bl	80014e2 <HAL_DMA_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80035ec:	f7ff ff7c 	bl	80034e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <HAL_ADC_MspInit+0xc8>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035fc:	bf00      	nop
 80035fe:	3728      	adds	r7, #40	; 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	20000088 	.word	0x20000088
 800360c:	40020008 	.word	0x40020008

08003610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d10b      	bne.n	800363a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_TIM_Base_MspInit+0x38>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <HAL_TIM_Base_MspInit+0x38>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	61d3      	str	r3, [r2, #28]
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_TIM_Base_MspInit+0x38>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000

0800364c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800365e:	e7fe      	b.n	800365e <HardFault_Handler+0x4>

08003660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003664:	e7fe      	b.n	8003664 <MemManage_Handler+0x4>

08003666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800366a:	e7fe      	b.n	800366a <BusFault_Handler+0x4>

0800366c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003670:	e7fe      	b.n	8003670 <UsageFault_Handler+0x4>

08003672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036a0:	f7fc fdd8 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <DMA1_Channel1_IRQHandler+0x10>)
 80036ae:	f7fd ffbe 	bl	800162e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000088 	.word	0x20000088

080036bc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <SystemInit+0x84>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <SystemInit+0x84>)
 80036c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <SystemInit+0x88>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <SystemInit+0x88>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <SystemInit+0x88>)
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4918      	ldr	r1, [pc, #96]	; (8003744 <SystemInit+0x88>)
 80036e2:	4b19      	ldr	r3, [pc, #100]	; (8003748 <SystemInit+0x8c>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80036e8:	4b16      	ldr	r3, [pc, #88]	; (8003744 <SystemInit+0x88>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <SystemInit+0x88>)
 80036ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <SystemInit+0x88>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <SystemInit+0x88>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <SystemInit+0x88>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <SystemInit+0x88>)
 800370a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800370e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <SystemInit+0x88>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <SystemInit+0x88>)
 8003716:	f023 030f 	bic.w	r3, r3, #15
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <SystemInit+0x88>)
 800371e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003720:	4908      	ldr	r1, [pc, #32]	; (8003744 <SystemInit+0x88>)
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <SystemInit+0x90>)
 8003724:	4013      	ands	r3, r2
 8003726:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <SystemInit+0x88>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <SystemInit+0x84>)
 8003730:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003734:	609a      	str	r2, [r3, #8]
#endif
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00
 8003744:	40021000 	.word	0x40021000
 8003748:	f87fc00c 	.word	0xf87fc00c
 800374c:	ff00fccc 	.word	0xff00fccc

08003750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003754:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003756:	e003      	b.n	8003760 <LoopCopyDataInit>

08003758 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800375a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800375c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800375e:	3104      	adds	r1, #4

08003760 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003764:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003766:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003768:	d3f6      	bcc.n	8003758 <CopyDataInit>
	ldr	r2, =_sbss
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopForever+0x12>)
	b	LoopFillZerobss
 800376c:	e002      	b.n	8003774 <LoopFillZerobss>

0800376e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800376e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003770:	f842 3b04 	str.w	r3, [r2], #4

08003774 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <LoopForever+0x16>)
	cmp	r2, r3
 8003776:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003778:	d3f9      	bcc.n	800376e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800377a:	f7ff ff9f 	bl	80036bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377e:	f000 f811 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003782:	f7ff fd51 	bl	8003228 <main>

08003786 <LoopForever>:

LoopForever:
    b LoopForever
 8003786:	e7fe      	b.n	8003786 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003788:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800378c:	0800384c 	.word	0x0800384c
	ldr	r0, =_sdata
 8003790:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003794:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003798:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800379c:	2000010c 	.word	0x2000010c

080037a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC1_2_IRQHandler>
	...

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4e0d      	ldr	r6, [pc, #52]	; (80037dc <__libc_init_array+0x38>)
 80037a8:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037aa:	1ba4      	subs	r4, r4, r6
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	2500      	movs	r5, #0
 80037b0:	42a5      	cmp	r5, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	4e0b      	ldr	r6, [pc, #44]	; (80037e4 <__libc_init_array+0x40>)
 80037b6:	4c0c      	ldr	r4, [pc, #48]	; (80037e8 <__libc_init_array+0x44>)
 80037b8:	f000 f820 	bl	80037fc <_init>
 80037bc:	1ba4      	subs	r4, r4, r6
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	2500      	movs	r5, #0
 80037c2:	42a5      	cmp	r5, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037cc:	4798      	blx	r3
 80037ce:	3501      	adds	r5, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037d6:	4798      	blx	r3
 80037d8:	3501      	adds	r5, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	08003844 	.word	0x08003844
 80037e0:	08003844 	.word	0x08003844
 80037e4:	08003844 	.word	0x08003844
 80037e8:	08003848 	.word	0x08003848

080037ec <memset>:
 80037ec:	4402      	add	r2, r0
 80037ee:	4603      	mov	r3, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <_init>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr

08003808 <_fini>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr
