
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ac  080042ac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080042ac  080042ac  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042ac  080042ac  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000001c  080042d0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080042d0  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016558  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002656  00000000  00000000  000365a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00038c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00039b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b839  00000000  00000000  0003a948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb9f  00000000  00000000  00056181  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099ddb  00000000  00000000  00062d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fcafb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  000fcb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004264 	.word	0x08004264

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004264 	.word	0x08004264

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x28>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f90d 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f003 fa38 	bl	8003e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f917 	bl	8000c32 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a1c:	f000 f8ed 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000018 	.word	0x20000018
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000000 	.word	0x20000000

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000038 	.word	0x20000038

08000a68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000038 	.word	0x20000038

08000a80 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	da0b      	bge.n	8000b10 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <NVIC_SetPriority+0x4c>)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	3b04      	subs	r3, #4
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0e:	e009      	b.n	8000b24 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <NVIC_SetPriority+0x50>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff47 	bl	8000a80 <NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5c 	bl	8000ac8 <NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c62:	e154      	b.n	8000f0e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 8146 	beq.w	8000f08 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b12      	cmp	r3, #18
 8000c8a:	d123      	bne.n	8000cd4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	6939      	ldr	r1, [r7, #16]
 8000cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0203 	and.w	r2, r3, #3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d00b      	beq.n	8000d28 <HAL_GPIO_Init+0xdc>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1c:	2b11      	cmp	r3, #17
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b12      	cmp	r3, #18
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80a0 	beq.w	8000f08 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc8:	4b58      	ldr	r3, [pc, #352]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a57      	ldr	r2, [pc, #348]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000de0:	4a53      	ldr	r2, [pc, #332]	; (8000f30 <HAL_GPIO_Init+0x2e4>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e0a:	d019      	beq.n	8000e40 <HAL_GPIO_Init+0x1f4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d013      	beq.n	8000e3c <HAL_GPIO_Init+0x1f0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d00d      	beq.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a47      	ldr	r2, [pc, #284]	; (8000f3c <HAL_GPIO_Init+0x2f0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0x1e8>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <HAL_GPIO_Init+0x2f4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d101      	bne.n	8000e30 <HAL_GPIO_Init+0x1e4>
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	e008      	b.n	8000e42 <HAL_GPIO_Init+0x1f6>
 8000e30:	2305      	movs	r3, #5
 8000e32:	e006      	b.n	8000e42 <HAL_GPIO_Init+0x1f6>
 8000e34:	2303      	movs	r3, #3
 8000e36:	e004      	b.n	8000e42 <HAL_GPIO_Init+0x1f6>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x1f6>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <HAL_GPIO_Init+0x1f6>
 8000e40:	2300      	movs	r3, #0
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	f002 0203 	and.w	r2, r2, #3
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	4093      	lsls	r3, r2
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e52:	4937      	ldr	r1, [pc, #220]	; (8000f30 <HAL_GPIO_Init+0x2e4>)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e60:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e84:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eae:	4a25      	ldr	r2, [pc, #148]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f aea3 	bne.w	8000c64 <HAL_GPIO_Init+0x18>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	48000400 	.word	0x48000400
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48001000 	.word	0x48001000
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e081      	b.n	800108e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d106      	bne.n	8000fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f002 ff74 	bl	8003e8c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2224      	movs	r2, #36	; 0x24
 8000fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	e006      	b.n	8001000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d104      	bne.n	8001012 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	ea42 0103 	orr.w	r1, r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	021a      	lsls	r2, r3, #8
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69d9      	ldr	r1, [r3, #28]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1a      	ldr	r2, [r3, #32]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b20      	cmp	r3, #32
 80010aa:	d138      	bne.n	800111e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e032      	b.n	8001120 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2224      	movs	r2, #36	; 0x24
 80010c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800111e:	2302      	movs	r3, #2
  }
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b20      	cmp	r3, #32
 8001144:	d139      	bne.n	80011ba <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001150:	2302      	movs	r3, #2
 8001152:	e033      	b.n	80011bc <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001182:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80011ba:	2302      	movs	r3, #2
  }
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0ce      	b.n	8001380 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d106      	bne.n	80011fc <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f002 ff22 	bl	8004040 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2203      	movs	r2, #3
 8001200:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	e040      	b.n	800128c <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3329      	adds	r3, #41	; 0x29
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3328      	adds	r3, #40	; 0x28
 8001232:	4602      	mov	r2, r0
 8001234:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	332b      	adds	r3, #43	; 0x2b
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	3334      	adds	r3, #52	; 0x34
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	3338      	adds	r3, #56	; 0x38
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	333c      	adds	r3, #60	; 0x3c
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3b9      	bcc.n	800120a <HAL_PCD_Init+0x42>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e046      	b.n	800132a <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	b2d8      	uxtb	r0, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80012c8:	4602      	mov	r2, r0
 80012ca:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a9b      	subs	r3, r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d3b3      	bcc.n	800129c <HAL_PCD_Init+0xd4>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2201      	movs	r2, #1
 800133a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0U*/
 hpcd->Instance->CNTR = 0U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800135c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001360:	60bb      	str	r3, [r7, #8]
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	b292      	uxth	r2, r2
 800136a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800138e:	af00      	add	r7, sp, #0
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	f000 beda 	b.w	8002156 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 816e 	beq.w	800168e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013b2:	4bb5      	ldr	r3, [pc, #724]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d00c      	beq.n	80013d8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013be:	4bb2      	ldr	r3, [pc, #712]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d15a      	bne.n	8001480 <HAL_RCC_OscConfig+0xf8>
 80013ca:	4baf      	ldr	r3, [pc, #700]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d6:	d153      	bne.n	8001480 <HAL_RCC_OscConfig+0xf8>
 80013d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013dc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d102      	bne.n	800140a <HAL_RCC_OscConfig+0x82>
 8001404:	4ba0      	ldr	r3, [pc, #640]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0xae>
 800140a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800141e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001422:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001426:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001432:	4b95      	ldr	r3, [pc, #596]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800143a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800143e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001442:	fa92 f2a2 	rbit	r2, r2
 8001446:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800144a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	b252      	sxtb	r2, r2
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	b252      	sxtb	r2, r2
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f002 021f 	and.w	r2, r2, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 810f 	beq.w	800168c <HAL_RCC_OscConfig+0x304>
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f040 8109 	bne.w	800168c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f000 be6b 	b.w	8002156 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x112>
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a7d      	ldr	r2, [pc, #500]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e030      	b.n	80014fc <HAL_RCC_OscConfig+0x174>
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x136>
 80014a4:	4b78      	ldr	r3, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a74      	ldr	r2, [pc, #464]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e01e      	b.n	80014fc <HAL_RCC_OscConfig+0x174>
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x15c>
 80014ca:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6e      	ldr	r2, [pc, #440]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6b      	ldr	r2, [pc, #428]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0x174>
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a67      	ldr	r2, [pc, #412]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a64      	ldr	r2, [pc, #400]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014fc:	4b62      	ldr	r3, [pc, #392]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	f023 020f 	bic.w	r2, r3, #15
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	495f      	ldr	r1, [pc, #380]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 800150c:	4313      	orrs	r3, r2
 800150e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d05a      	beq.n	80015d0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff faa5 	bl	8000a68 <HAL_GetTick>
 800151e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff faa0 	bl	8000a68 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d902      	bls.n	800153a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	f000 be0e 	b.w	8002156 <HAL_RCC_OscConfig+0xdce>
 800153a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800153e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800154e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0x1e4>
 8001566:	4b48      	ldr	r3, [pc, #288]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e015      	b.n	8001598 <HAL_RCC_OscConfig+0x210>
 800156c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001570:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001578:	fa93 f3a3 	rbit	r3, r3
 800157c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001584:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001588:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001594:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015a0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015a4:	fa92 f2a2 	rbit	r2, r2
 80015a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80015ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015b0:	fab2 f282 	clz	r2, r2
 80015b4:	b252      	sxtb	r2, r2
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f002 021f 	and.w	r2, r2, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0aa      	beq.n	8001524 <HAL_RCC_OscConfig+0x19c>
 80015ce:	e05e      	b.n	800168e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fa4a 	bl	8000a68 <HAL_GetTick>
 80015d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015da:	f7ff fa45 	bl	8000a68 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d902      	bls.n	80015f0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	f000 bdb3 	b.w	8002156 <HAL_RCC_OscConfig+0xdce>
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001604:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <HAL_RCC_OscConfig+0x29a>
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x2c6>
 8001622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001626:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800163e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_RCC_OscConfig+0x300>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001652:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001656:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800165a:	fa92 f2a2 	rbit	r2, r2
 800165e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001662:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001666:	fab2 f282 	clz	r2, r2
 800166a:	b252      	sxtb	r2, r2
 800166c:	f042 0220 	orr.w	r2, r2, #32
 8001670:	b252      	sxtb	r2, r2
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1aa      	bne.n	80015da <HAL_RCC_OscConfig+0x252>
 8001684:	e003      	b.n	800168e <HAL_RCC_OscConfig+0x306>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8170 	beq.w	800197e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800169e:	4bd0      	ldr	r3, [pc, #832]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016aa:	4bcd      	ldr	r3, [pc, #820]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d16d      	bne.n	8001792 <HAL_RCC_OscConfig+0x40a>
 80016b6:	4bca      	ldr	r3, [pc, #808]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d167      	bne.n	8001792 <HAL_RCC_OscConfig+0x40a>
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80016d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_OscConfig+0x36a>
 80016ec:	4bbc      	ldr	r3, [pc, #752]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	e013      	b.n	800171a <HAL_RCC_OscConfig+0x392>
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001704:	2302      	movs	r3, #2
 8001706:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800170a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001716:	4bb2      	ldr	r3, [pc, #712]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	2202      	movs	r2, #2
 800171c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001720:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001724:	fa92 f2a2 	rbit	r2, r2
 8001728:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800172c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001730:	fab2 f282 	clz	r2, r2
 8001734:	b252      	sxtb	r2, r2
 8001736:	f042 0220 	orr.w	r2, r2, #32
 800173a:	b252      	sxtb	r2, r2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f002 021f 	and.w	r2, r2, #31
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	4013      	ands	r3, r2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_RCC_OscConfig+0x3d6>
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d002      	beq.n	800175e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	f000 bcfc 	b.w	8002156 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4ba0      	ldr	r3, [pc, #640]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6959      	ldr	r1, [r3, #20]
 800176c:	23f8      	movs	r3, #248	; 0xf8
 800176e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001776:	fa93 f3a3 	rbit	r3, r3
 800177a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800177e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	4995      	ldr	r1, [pc, #596]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001790:	e0f5      	b.n	800197e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8085 	beq.w	80018a8 <HAL_RCC_OscConfig+0x520>
 800179e:	2301      	movs	r3, #1
 80017a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80017b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	461a      	mov	r2, r3
 80017c4:	2301      	movs	r3, #1
 80017c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff f94e 	bl	8000a68 <HAL_GetTick>
 80017cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff f949 	bl	8000a68 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d902      	bls.n	80017e8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	f000 bcb7 	b.w	8002156 <HAL_RCC_OscConfig+0xdce>
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80017fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_RCC_OscConfig+0x490>
 8001812:	4b73      	ldr	r3, [pc, #460]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x4b8>
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001830:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	2202      	movs	r2, #2
 8001842:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001846:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800184a:	fa92 f2a2 	rbit	r2, r2
 800184e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001852:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001856:	fab2 f282 	clz	r2, r2
 800185a:	b252      	sxtb	r2, r2
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	b252      	sxtb	r2, r2
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	f002 021f 	and.w	r2, r2, #31
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f202 	lsl.w	r2, r1, r2
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ae      	beq.n	80017d2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6959      	ldr	r1, [r3, #20]
 8001882:	23f8      	movs	r3, #248	; 0xf8
 8001884:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001894:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	494f      	ldr	r1, [pc, #316]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
 80018a6:	e06a      	b.n	800197e <HAL_RCC_OscConfig+0x5f6>
 80018a8:	2301      	movs	r3, #1
 80018aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80018ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	461a      	mov	r2, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff f8c9 	bl	8000a68 <HAL_GetTick>
 80018d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff f8c4 	bl	8000a68 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d902      	bls.n	80018f2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	f000 bc32 	b.w	8002156 <HAL_RCC_OscConfig+0xdce>
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001904:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x59a>
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e013      	b.n	800194a <HAL_RCC_OscConfig+0x5c2>
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800193a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_RCC_OscConfig+0x658>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	2202      	movs	r2, #2
 800194c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001950:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001954:	fa92 f2a2 	rbit	r2, r2
 8001958:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800195c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	b252      	sxtb	r2, r2
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	b252      	sxtb	r2, r2
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f002 021f 	and.w	r2, r2, #31
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ae      	bne.n	80018dc <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80d8 	beq.w	8001b3e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d067      	beq.n	8001a68 <HAL_RCC_OscConfig+0x6e0>
 8001998:	2301      	movs	r3, #1
 800199a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80019aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_OscConfig+0x65c>)
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	461a      	mov	r2, r3
 80019bc:	2301      	movs	r3, #1
 80019be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f852 	bl	8000a68 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c8:	e00e      	b.n	80019e8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff f84d 	bl	8000a68 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d906      	bls.n	80019e8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e3bb      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	10908120 	.word	0x10908120
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a12:	2202      	movs	r2, #2
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4ba5      	ldr	r3, [pc, #660]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6019      	str	r1, [r3, #0]
 8001a32:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f1a3 	rbit	r1, r3
 8001a3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a40:	6019      	str	r1, [r3, #0]
  return(result);
 8001a42:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0b1      	beq.n	80019ca <HAL_RCC_OscConfig+0x642>
 8001a66:	e06a      	b.n	8001b3e <HAL_RCC_OscConfig+0x7b6>
 8001a68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a7e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a80:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <HAL_RCC_OscConfig+0x938>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	461a      	mov	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7fe ffe6 	bl	8000a68 <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7fe ffe1 	bl	8000a68 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e34f      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
 8001ab6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001afc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afe:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b06:	2102      	movs	r1, #2
 8001b08:	6019      	str	r1, [r3, #0]
 8001b0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f1a3 	rbit	r1, r3
 8001b14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b18:	6019      	str	r1, [r3, #0]
  return(result);
 8001b1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1b1      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8159 	beq.w	8001e00 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d112      	bne.n	8001b86 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	4a55      	ldr	r2, [pc, #340]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	61d3      	str	r3, [r2, #28]
 8001b6c:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <HAL_RCC_OscConfig+0x93c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_RCC_OscConfig+0x93c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_RCC_OscConfig+0x93c>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9e:	f7fe ff63 	bl	8000a68 <HAL_GetTick>
 8001ba2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba8:	f7fe ff5e 	bl	8000a68 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e2cc      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_OscConfig+0x93c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ef      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCC_OscConfig+0x858>
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a39      	ldr	r2, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	e02f      	b.n	8001c40 <HAL_RCC_OscConfig+0x8b8>
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x87c>
 8001bea:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a33      	ldr	r2, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0x8b8>
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x8a0>
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x8b8>
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001c3a:	f023 0304 	bic.w	r3, r3, #4
 8001c3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d06b      	beq.n	8001d22 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe ff0d 	bl	8000a68 <HAL_GetTick>
 8001c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7fe ff08 	bl	8000a68 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e274      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
 8001c6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c70:	2202      	movs	r2, #2
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c88:	2202      	movs	r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c9a:	601a      	str	r2, [r3, #0]
  return(result);
 8001c9c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ca0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x940>
 8001cb6:	4b01      	ldr	r3, [pc, #4]	; (8001cbc <HAL_RCC_OscConfig+0x934>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	e013      	b.n	8001ce4 <HAL_RCC_OscConfig+0x95c>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	10908120 	.word	0x10908120
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ccc:	2202      	movs	r2, #2
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	4bbb      	ldr	r3, [pc, #748]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ce8:	2102      	movs	r1, #2
 8001cea:	6011      	str	r1, [r2, #0]
 8001cec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	fa92 f1a2 	rbit	r1, r2
 8001cf6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cfa:	6011      	str	r1, [r2, #0]
  return(result);
 8001cfc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	fab2 f282 	clz	r2, r2
 8001d06:	b252      	sxtb	r2, r2
 8001d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0c:	b252      	sxtb	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d099      	beq.n	8001c54 <HAL_RCC_OscConfig+0x8cc>
 8001d20:	e064      	b.n	8001dec <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7fe fea1 	bl	8000a68 <HAL_GetTick>
 8001d26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7fe fe9c 	bl	8000a68 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e208      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
 8001d44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d48:	2202      	movs	r2, #2
 8001d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	fa93 f2a3 	rbit	r2, r3
 8001d56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d72:	601a      	str	r2, [r3, #0]
  return(result);
 8001d74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCC_OscConfig+0xa0c>
 8001d8e:	4b90      	ldr	r3, [pc, #576]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	e00d      	b.n	8001db0 <HAL_RCC_OscConfig+0xa28>
 8001d94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d98:	2202      	movs	r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001db4:	2102      	movs	r1, #2
 8001db6:	6011      	str	r1, [r2, #0]
 8001db8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	fa92 f1a2 	rbit	r1, r2
 8001dc2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dc6:	6011      	str	r1, [r2, #0]
  return(result);
 8001dc8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b252      	sxtb	r2, r2
 8001dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd8:	b252      	sxtb	r2, r2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d19f      	bne.n	8001d2c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 81a4 	beq.w	8002154 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0c:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	f000 819b 	beq.w	8002150 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	f040 8113 	bne.w	800204c <HAL_RCC_OscConfig+0xcc4>
 8001e26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e3e:	601a      	str	r2, [r3, #0]
  return(result);
 8001e40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	461a      	mov	r2, r3
 8001e56:	2300      	movs	r3, #0
 8001e58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fe05 	bl	8000a68 <HAL_GetTick>
 8001e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	e009      	b.n	8001e78 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7fe fe00 	bl	8000a68 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e16e      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
 8001e78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e90:	601a      	str	r2, [r3, #0]
  return(result);
 8001e92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xb2a>
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e01b      	b.n	8001eea <HAL_RCC_OscConfig+0xb62>
 8001eb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001eee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef2:	6011      	str	r1, [r2, #0]
 8001ef4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	fa92 f1a2 	rbit	r1, r2
 8001efe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f02:	6011      	str	r1, [r2, #0]
  return(result);
 8001f04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	b252      	sxtb	r2, r2
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	b252      	sxtb	r2, r2
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f002 021f 	and.w	r2, r2, #31
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d19d      	bne.n	8001e64 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	4924      	ldr	r1, [pc, #144]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f5c:	601a      	str	r2, [r3, #0]
  return(result);
 8001f5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f62:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	461a      	mov	r2, r3
 8001f74:	2301      	movs	r3, #1
 8001f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fd76 	bl	8000a68 <HAL_GetTick>
 8001f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	e009      	b.n	8001f96 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f82:	f7fe fd71 	bl	8000a68 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e0df      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
 8001f96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fa93 f2a3 	rbit	r2, r3
 8001faa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fae:	601a      	str	r2, [r3, #0]
  return(result);
 8001fb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d104      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xc4c>
 8001fca:	4b01      	ldr	r3, [pc, #4]	; (8001fd0 <HAL_RCC_OscConfig+0xc48>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xc84>
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	fa93 f2a3 	rbit	r2, r3
 8001fe8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_RCC_OscConfig+0xdd8>)
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002014:	6011      	str	r1, [r2, #0]
 8002016:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	fa92 f1a2 	rbit	r1, r2
 8002020:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002024:	6011      	str	r1, [r2, #0]
  return(result);
 8002026:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	fab2 f282 	clz	r2, r2
 8002030:	b252      	sxtb	r2, r2
 8002032:	f042 0220 	orr.w	r2, r2, #32
 8002036:	b252      	sxtb	r2, r2
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	f002 021f 	and.w	r2, r2, #31
 800203e:	2101      	movs	r1, #1
 8002040:	fa01 f202 	lsl.w	r2, r1, r2
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d09b      	beq.n	8001f82 <HAL_RCC_OscConfig+0xbfa>
 800204a:	e083      	b.n	8002154 <HAL_RCC_OscConfig+0xdcc>
 800204c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002064:	601a      	str	r2, [r3, #0]
  return(result);
 8002066:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800206a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002074:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	461a      	mov	r2, r3
 800207c:	2300      	movs	r3, #0
 800207e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fcf2 	bl	8000a68 <HAL_GetTick>
 8002084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	e009      	b.n	800209e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fced 	bl	8000a68 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e05b      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b6:	601a      	str	r2, [r3, #0]
  return(result);
 80020b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0xd50>
 80020d2:	4b23      	ldr	r3, [pc, #140]	; (8002160 <HAL_RCC_OscConfig+0xdd8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e01b      	b.n	8002110 <HAL_RCC_OscConfig+0xd88>
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f107 0320 	add.w	r3, r7, #32
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_RCC_OscConfig+0xdd8>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f107 0214 	add.w	r2, r7, #20
 8002114:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002118:	6011      	str	r1, [r2, #0]
 800211a:	f107 0214 	add.w	r2, r7, #20
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	fa92 f1a2 	rbit	r1, r2
 8002124:	f107 0210 	add.w	r2, r7, #16
 8002128:	6011      	str	r1, [r2, #0]
  return(result);
 800212a:	f107 0210 	add.w	r2, r7, #16
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b252      	sxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b252      	sxtb	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f002 021f 	and.w	r2, r2, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d19d      	bne.n	800208a <HAL_RCC_OscConfig+0xd02>
 800214e:	e001      	b.n	8002154 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09e      	sub	sp, #120	; 0x78
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e164      	b.n	8002446 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	498d      	ldr	r1, [pc, #564]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b8b      	ldr	r3, [pc, #556]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e14c      	b.n	8002446 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b84      	ldr	r3, [pc, #528]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4981      	ldr	r1, [pc, #516]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80df 	beq.w	8002396 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d13d      	bne.n	800225c <HAL_RCC_ClockConfig+0xf8>
 80021e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80021ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d102      	bne.n	800220a <HAL_RCC_ClockConfig+0xa6>
 8002204:	4b71      	ldr	r3, [pc, #452]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e00f      	b.n	800222a <HAL_RCC_ClockConfig+0xc6>
 800220a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	667b      	str	r3, [r7, #100]	; 0x64
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	663b      	str	r3, [r7, #96]	; 0x60
 800221e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002226:	4b69      	ldr	r3, [pc, #420]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800222e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b252      	sxtb	r2, r2
 8002240:	f042 0220 	orr.w	r2, r2, #32
 8002244:	b252      	sxtb	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f002 021f 	and.w	r2, r2, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d17d      	bne.n	8002354 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0f4      	b.n	8002446 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d13d      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x17c>
 8002264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002268:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d102      	bne.n	800228e <HAL_RCC_ClockConfig+0x12a>
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	e00f      	b.n	80022ae <HAL_RCC_ClockConfig+0x14a>
 800228e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002292:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	647b      	str	r3, [r7, #68]	; 0x44
 800229c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a0:	643b      	str	r3, [r7, #64]	; 0x40
 80022a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022aa:	4b48      	ldr	r3, [pc, #288]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80022b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022b6:	fa92 f2a2 	rbit	r2, r2
 80022ba:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80022bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	b252      	sxtb	r2, r2
 80022c4:	f042 0220 	orr.w	r2, r2, #32
 80022c8:	b252      	sxtb	r2, r2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f002 021f 	and.w	r2, r2, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d13b      	bne.n	8002354 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b2      	b.n	8002446 <HAL_RCC_ClockConfig+0x2e2>
 80022e0:	2302      	movs	r3, #2
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_RCC_ClockConfig+0x1a4>
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e00d      	b.n	8002324 <HAL_RCC_ClockConfig+0x1c0>
 8002308:	2302      	movs	r3, #2
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
 8002314:	2302      	movs	r3, #2
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2202      	movs	r2, #2
 8002326:	61ba      	str	r2, [r7, #24]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	617a      	str	r2, [r7, #20]
  return(result);
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b252      	sxtb	r2, r2
 8002338:	f042 0220 	orr.w	r2, r2, #32
 800233c:	b252      	sxtb	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e078      	b.n	8002446 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 0203 	bic.w	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	491a      	ldr	r1, [pc, #104]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002366:	f7fe fb7f 	bl	8000a68 <HAL_GetTick>
 800236a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236c:	e00a      	b.n	8002384 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236e:	f7fe fb7b 	bl	8000a68 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e060      	b.n	8002446 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 020c 	and.w	r2, r3, #12
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	429a      	cmp	r2, r3
 8002394:	d1eb      	bne.n	800236e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d215      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 0207 	bic.w	r2, r3, #7
 80023ac:	4906      	ldr	r1, [pc, #24]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d006      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e03f      	b.n	8002446 <HAL_RCC_ClockConfig+0x2e2>
 80023c6:	bf00      	nop
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_RCC_ClockConfig+0x2ec>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4919      	ldr	r1, [pc, #100]	; (8002450 <HAL_RCC_ClockConfig+0x2ec>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_ClockConfig+0x2ec>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4911      	ldr	r1, [pc, #68]	; (8002450 <HAL_RCC_ClockConfig+0x2ec>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800240e:	f000 f825 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_RCC_ClockConfig+0x2ec>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800241c:	23f0      	movs	r3, #240	; 0xf0
 800241e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	60fb      	str	r3, [r7, #12]
  return(result);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_RCC_ClockConfig+0x2f0>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	fa21 f303 	lsr.w	r3, r1, r3
 800243a:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_RCC_ClockConfig+0x2f4>)
 800243c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f7fe face 	bl	80009e0 <HAL_InitTick>
  
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3778      	adds	r7, #120	; 0x78
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	0800429c 	.word	0x0800429c
 8002458:	20000018 	.word	0x20000018

0800245c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b08b      	sub	sp, #44	; 0x2c
 8002460:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x30>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x36>
 800248a:	e03c      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_GetSysClockFreq+0xc4>)
 800248e:	623b      	str	r3, [r7, #32]
      break;
 8002490:	e03c      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002498:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800249c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	607b      	str	r3, [r7, #4]
  return(result);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	230f      	movs	r3, #15
 80024c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80024e4:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	e004      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	4a0c      	ldr	r2, [pc, #48]	; (800252c <HAL_RCC_GetSysClockFreq+0xd0>)
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	623b      	str	r3, [r7, #32]
      break;
 8002504:	e002      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002508:	623b      	str	r3, [r7, #32]
      break;
 800250a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250c:	6a3b      	ldr	r3, [r7, #32]
}
 800250e:	4618      	mov	r0, r3
 8002510:	372c      	adds	r7, #44	; 0x2c
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	007a1200 	.word	0x007a1200
 8002524:	0800427c 	.word	0x0800427c
 8002528:	0800428c 	.word	0x0800428c
 800252c:	003d0900 	.word	0x003d0900

08002530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b092      	sub	sp, #72	; 0x48
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80d6 	beq.w	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002554:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10e      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4a49      	ldr	r2, [pc, #292]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256a:	61d3      	str	r3, [r2, #28]
 800256c:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a40      	ldr	r2, [pc, #256]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe fa67 	bl	8000a68 <HAL_GetTick>
 800259a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe fa63 	bl	8000a68 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e168      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x352>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8083 	beq.w	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d07b      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	461a      	mov	r2, r3
 8002604:	2301      	movs	r3, #1
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	461a      	mov	r2, r3
 8002626:	2300      	movs	r3, #0
 8002628:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800262c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04c      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fa15 	bl	8000a68 <HAL_GetTick>
 800263e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fa11 	bl	8000a68 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e114      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002658:	2302      	movs	r3, #2
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002670:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d108      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002686:	4b01      	ldr	r3, [pc, #4]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	e00d      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800268c:	40021000 	.word	0x40021000
 8002690:	40007000 	.word	0x40007000
 8002694:	10908100 	.word	0x10908100
 8002698:	2302      	movs	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2202      	movs	r2, #2
 80026aa:	613a      	str	r2, [r7, #16]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	fa92 f2a2 	rbit	r2, r2
 80026b2:	60fa      	str	r2, [r7, #12]
  return(result);
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	fab2 f282 	clz	r2, r2
 80026ba:	b252      	sxtb	r2, r2
 80026bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c0:	b252      	sxtb	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0b6      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026d4:	4b6d      	ldr	r3, [pc, #436]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	496a      	ldr	r1, [pc, #424]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002706:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	495e      	ldr	r1, [pc, #376]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4956      	ldr	r1, [pc, #344]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002742:	4b52      	ldr	r3, [pc, #328]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	494f      	ldr	r1, [pc, #316]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002760:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	f023 0210 	bic.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	4947      	ldr	r1, [pc, #284]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800276e:	4313      	orrs	r3, r2
 8002770:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	4940      	ldr	r1, [pc, #256]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	f023 0220 	bic.w	r2, r3, #32
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4938      	ldr	r1, [pc, #224]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4931      	ldr	r1, [pc, #196]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4929      	ldr	r1, [pc, #164]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	4922      	ldr	r1, [pc, #136]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	491a      	ldr	r1, [pc, #104]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	4913      	ldr	r1, [pc, #76]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	4904      	ldr	r1, [pc, #16]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800287c:	4313      	orrs	r3, r2
 800287e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3748      	adds	r7, #72	; 0x48
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e084      	b.n	80029ac <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f001 fb29 	bl	8003f14 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028e2:	d902      	bls.n	80028ea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e002      	b.n	80028f0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028f8:	d007      	beq.n	800290a <HAL_SPI_Init+0x7a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002902:	d002      	beq.n	800290a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800291a:	d903      	bls.n	8002924 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
 8002922:	e002      	b.n	800292a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	ea42 0103 	orr.w	r1, r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0204 	and.w	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	ea42 0103 	orr.w	r1, r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e01d      	b.n	8002a02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f001 fadc 	bl	8003f98 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 f96a 	bl	8002ccc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e01d      	b.n	8002a58 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f815 	bl	8002a60 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f000 f93f 	bl	8002ccc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fc7f 	bl	800338a <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_TIM_PWM_Start+0x80>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_TIM_PWM_Start+0x4a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <HAL_TIM_PWM_Start+0x84>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_TIM_PWM_Start+0x4a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <HAL_TIM_PWM_Start+0x88>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_TIM_PWM_Start+0x4a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_TIM_PWM_Start+0x8c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_TIM_PWM_Start+0x4a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <HAL_TIM_PWM_Start+0x90>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0x4e>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_TIM_PWM_Start+0x50>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
} 
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40013400 	.word	0x40013400
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40014400 	.word	0x40014400
 8002b04:	40014800 	.word	0x40014800

08002b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIM_ConfigClockSource+0x1c>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0cf      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d07c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x152>
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d80f      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x7c>
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	f000 808f 	beq.w	8002c88 <HAL_TIM_ConfigClockSource+0x180>
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d803      	bhi.n	8002b76 <HAL_TIM_ConfigClockSource+0x6e>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8083 	beq.w	8002c7a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8002b74:	e09d      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	f000 808d 	beq.w	8002c96 <HAL_TIM_ConfigClockSource+0x18e>
 8002b7c:	2b30      	cmp	r3, #48	; 0x30
 8002b7e:	f000 8091 	beq.w	8002ca4 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8002b82:	e096      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002b84:	2b70      	cmp	r3, #112	; 0x70
 8002b86:	d018      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0xb2>
 8002b88:	2b70      	cmp	r3, #112	; 0x70
 8002b8a:	d804      	bhi.n	8002b96 <HAL_TIM_ConfigClockSource+0x8e>
 8002b8c:	2b50      	cmp	r3, #80	; 0x50
 8002b8e:	d044      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x112>
 8002b90:	2b60      	cmp	r3, #96	; 0x60
 8002b92:	d052      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8002b94:	e08d      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d003      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x9c>
 8002b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba0:	d028      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8002ba2:	e086      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	6093      	str	r3, [r2, #8]
    break;
 8002bb8:	e07b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f000 fbbc 	bl	8003346 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
    break;
 8002bf2:	e05e      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f000 fb9f 	bl	8003346 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c16:	609a      	str	r2, [r3, #8]
    break;
 8002c18:	e04b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fb06 	bl	8003238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2150      	movs	r1, #80	; 0x50
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fb67 	bl	8003306 <TIM_ITRx_SetConfig>
    break;
 8002c38:	e03b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 fb29 	bl	800329e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2160      	movs	r1, #96	; 0x60
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fb57 	bl	8003306 <TIM_ITRx_SetConfig>
    break;
 8002c58:	e02b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 fae6 	bl	8003238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fb47 	bl	8003306 <TIM_ITRx_SetConfig>
    break;
 8002c78:	e01b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb40 	bl	8003306 <TIM_ITRx_SetConfig>
    break;
 8002c86:	e014      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fb39 	bl	8003306 <TIM_ITRx_SetConfig>
    break;
 8002c94:	e00d      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fb32 	bl	8003306 <TIM_ITRx_SetConfig>
    break;
 8002ca2:	e006      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2130      	movs	r1, #48	; 0x30
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fb2b 	bl	8003306 <TIM_ITRx_SetConfig>
    break;
 8002cb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3c      	ldr	r2, [pc, #240]	; (8002dd4 <TIM_Base_SetConfig+0x108>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00f      	beq.n	8002d08 <TIM_Base_SetConfig+0x3c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d00b      	beq.n	8002d08 <TIM_Base_SetConfig+0x3c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a39      	ldr	r2, [pc, #228]	; (8002dd8 <TIM_Base_SetConfig+0x10c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <TIM_Base_SetConfig+0x3c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <TIM_Base_SetConfig+0x110>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <TIM_Base_SetConfig+0x3c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a37      	ldr	r2, [pc, #220]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d108      	bne.n	8002d1a <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	; (8002dd4 <TIM_Base_SetConfig+0x108>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01b      	beq.n	8002d5a <TIM_Base_SetConfig+0x8e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d017      	beq.n	8002d5a <TIM_Base_SetConfig+0x8e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <TIM_Base_SetConfig+0x10c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <TIM_Base_SetConfig+0x8e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <TIM_Base_SetConfig+0x110>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <TIM_Base_SetConfig+0x8e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0x8e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <TIM_Base_SetConfig+0x118>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0x8e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <TIM_Base_SetConfig+0x11c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0x8e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a25      	ldr	r2, [pc, #148]	; (8002dec <TIM_Base_SetConfig+0x120>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <TIM_Base_SetConfig+0x108>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00f      	beq.n	8002db8 <TIM_Base_SetConfig+0xec>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <TIM_Base_SetConfig+0xec>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <TIM_Base_SetConfig+0x118>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_Base_SetConfig+0xec>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <TIM_Base_SetConfig+0x11c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_Base_SetConfig+0xec>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <TIM_Base_SetConfig+0x120>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d103      	bne.n	8002dc0 <TIM_Base_SetConfig+0xf4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	40013400 	.word	0x40013400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800

08002df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a2c      	ldr	r2, [pc, #176]	; (8002f08 <TIM_OC1_SetConfig+0x118>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00f      	beq.n	8002e7c <TIM_OC1_SetConfig+0x8c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <TIM_OC1_SetConfig+0x11c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00b      	beq.n	8002e7c <TIM_OC1_SetConfig+0x8c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <TIM_OC1_SetConfig+0x120>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <TIM_OC1_SetConfig+0x8c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <TIM_OC1_SetConfig+0x124>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_OC1_SetConfig+0x8c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <TIM_OC1_SetConfig+0x128>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10c      	bne.n	8002e96 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0308 	bic.w	r3, r3, #8
 8002e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <TIM_OC1_SetConfig+0x118>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00f      	beq.n	8002ebe <TIM_OC1_SetConfig+0xce>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <TIM_OC1_SetConfig+0x11c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <TIM_OC1_SetConfig+0xce>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <TIM_OC1_SetConfig+0x120>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <TIM_OC1_SetConfig+0xce>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <TIM_OC1_SetConfig+0x124>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_OC1_SetConfig+0xce>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <TIM_OC1_SetConfig+0x128>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d111      	bne.n	8002ee2 <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	621a      	str	r2, [r3, #32]
} 
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40013400 	.word	0x40013400
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40014400 	.word	0x40014400
 8002f18:	40014800 	.word	0x40014800

08002f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0210 	bic.w	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0320 	bic.w	r3, r3, #32
 8002f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a28      	ldr	r2, [pc, #160]	; (8003028 <TIM_OC2_SetConfig+0x10c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_OC2_SetConfig+0x78>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a27      	ldr	r2, [pc, #156]	; (800302c <TIM_OC2_SetConfig+0x110>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10d      	bne.n	8002fb0 <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fae:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <TIM_OC2_SetConfig+0x10c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00f      	beq.n	8002fd8 <TIM_OC2_SetConfig+0xbc>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <TIM_OC2_SetConfig+0x110>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00b      	beq.n	8002fd8 <TIM_OC2_SetConfig+0xbc>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <TIM_OC2_SetConfig+0x114>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d007      	beq.n	8002fd8 <TIM_OC2_SetConfig+0xbc>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <TIM_OC2_SetConfig+0x118>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_OC2_SetConfig+0xbc>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a19      	ldr	r2, [pc, #100]	; (8003038 <TIM_OC2_SetConfig+0x11c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d113      	bne.n	8003000 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fde:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe6:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40013400 	.word	0x40013400
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800

0800303c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a27      	ldr	r2, [pc, #156]	; (8003144 <TIM_OC3_SetConfig+0x108>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_OC3_SetConfig+0x76>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <TIM_OC3_SetConfig+0x10c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10d      	bne.n	80030ce <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030cc:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <TIM_OC3_SetConfig+0x108>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00f      	beq.n	80030f6 <TIM_OC3_SetConfig+0xba>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <TIM_OC3_SetConfig+0x10c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <TIM_OC3_SetConfig+0xba>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1a      	ldr	r2, [pc, #104]	; (800314c <TIM_OC3_SetConfig+0x110>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <TIM_OC3_SetConfig+0xba>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a19      	ldr	r2, [pc, #100]	; (8003150 <TIM_OC3_SetConfig+0x114>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_OC3_SetConfig+0xba>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <TIM_OC3_SetConfig+0x118>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <TIM_OC3_SetConfig+0xe2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003104:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	621a      	str	r2, [r3, #32]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40013400 	.word	0x40013400
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800

08003158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	031b      	lsls	r3, r3, #12
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a18      	ldr	r2, [pc, #96]	; (8003224 <TIM_OC4_SetConfig+0xcc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00f      	beq.n	80031e8 <TIM_OC4_SetConfig+0x90>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a17      	ldr	r2, [pc, #92]	; (8003228 <TIM_OC4_SetConfig+0xd0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <TIM_OC4_SetConfig+0x90>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <TIM_OC4_SetConfig+0xd4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <TIM_OC4_SetConfig+0x90>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <TIM_OC4_SetConfig+0xd8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_OC4_SetConfig+0x90>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <TIM_OC4_SetConfig+0xdc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d109      	bne.n	80031fc <TIM_OC4_SetConfig+0xa4>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ee:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	019b      	lsls	r3, r3, #6
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40013400 	.word	0x40013400
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800

08003238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f023 0201 	bic.w	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f023 030a 	bic.w	r3, r3, #10
 800327c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800329e:	b480      	push	{r7}
 80032a0:	b087      	sub	sp, #28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0210 	bic.w	r2, r3, #16
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	621a      	str	r2, [r3, #32]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	460b      	mov	r3, r1
 8003310:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	f043 0307 	orr.w	r3, r3, #7
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	609a      	str	r2, [r3, #8]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003346:	b480      	push	{r7}
 8003348:	b087      	sub	sp, #28
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003364:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	431a      	orrs	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	609a      	str	r2, [r3, #8]
} 
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800338a:	b480      	push	{r7}
 800338c:	b087      	sub	sp, #28
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800339a:	2201      	movs	r2, #1
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	401a      	ands	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	431a      	orrs	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e105      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2202      	movs	r2, #2
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b14      	cmp	r3, #20
 80033fe:	f200 80f0 	bhi.w	80035e2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800345d 	.word	0x0800345d
 800340c:	080035e3 	.word	0x080035e3
 8003410:	080035e3 	.word	0x080035e3
 8003414:	080035e3 	.word	0x080035e3
 8003418:	0800349d 	.word	0x0800349d
 800341c:	080035e3 	.word	0x080035e3
 8003420:	080035e3 	.word	0x080035e3
 8003424:	080035e3 	.word	0x080035e3
 8003428:	080034df 	.word	0x080034df
 800342c:	080035e3 	.word	0x080035e3
 8003430:	080035e3 	.word	0x080035e3
 8003434:	080035e3 	.word	0x080035e3
 8003438:	0800351f 	.word	0x0800351f
 800343c:	080035e3 	.word	0x080035e3
 8003440:	080035e3 	.word	0x080035e3
 8003444:	080035e3 	.word	0x080035e3
 8003448:	08003561 	.word	0x08003561
 800344c:	080035e3 	.word	0x080035e3
 8003450:	080035e3 	.word	0x080035e3
 8003454:	080035e3 	.word	0x080035e3
 8003458:	080035a1 	.word	0x080035a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fcc4 	bl	8002df0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6999      	ldr	r1, [r3, #24]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	619a      	str	r2, [r3, #24]
    }
    break;
 800349a:	e0a3      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fd3a 	bl	8002f1c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6999      	ldr	r1, [r3, #24]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	619a      	str	r2, [r3, #24]
    }
    break;
 80034dc:	e082      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fda9 	bl	800303c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0208 	orr.w	r2, r2, #8
 80034f8:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0204 	bic.w	r2, r2, #4
 8003508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	61da      	str	r2, [r3, #28]
    }
    break;
 800351c:	e062      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fe17 	bl	8003158 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003538:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69d9      	ldr	r1, [r3, #28]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	021a      	lsls	r2, r3, #8
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	61da      	str	r2, [r3, #28]
    }
    break;
 800355e:	e041      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f89e 	bl	80036a8 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0208 	orr.w	r2, r2, #8
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0204 	bic.w	r2, r2, #4
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800359e:	e021      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f8e8 	bl	800377c <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	021a      	lsls	r2, r3, #8
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80035e2:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003614:	2302      	movs	r3, #2
 8003616:	e03d      	b.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800364a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	4313      	orrs	r3, r2
 8003678:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
} 
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40013400 	.word	0x40013400

080036a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <TIM_OC5_SetConfig+0xc0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_OC5_SetConfig+0x86>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <TIM_OC5_SetConfig+0xc4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_OC5_SetConfig+0x86>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <TIM_OC5_SetConfig+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_OC5_SetConfig+0x86>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <TIM_OC5_SetConfig+0xcc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC5_SetConfig+0x86>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <TIM_OC5_SetConfig+0xd0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d109      	bne.n	8003742 <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	621a      	str	r2, [r3, #32]
}
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40013400 	.word	0x40013400
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800

0800377c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	051b      	lsls	r3, r3, #20
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <TIM_OC6_SetConfig+0xc4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00f      	beq.n	8003804 <TIM_OC6_SetConfig+0x88>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <TIM_OC6_SetConfig+0xc8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_OC6_SetConfig+0x88>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <TIM_OC6_SetConfig+0xcc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_OC6_SetConfig+0x88>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a15      	ldr	r2, [pc, #84]	; (800384c <TIM_OC6_SetConfig+0xd0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_OC6_SetConfig+0x88>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a14      	ldr	r2, [pc, #80]	; (8003850 <TIM_OC6_SetConfig+0xd4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d109      	bne.n	8003818 <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	029b      	lsls	r3, r3, #10
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]
} 
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40013400 	.word	0x40013400
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800

08003854 <hamaraMap>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
double hamaraMap(int value,float r1,float r2,float s1,float s2)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6178      	str	r0, [r7, #20]
 800385c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003860:	edc7 0a03 	vstr	s1, [r7, #12]
 8003864:	ed87 1a02 	vstr	s2, [r7, #8]
 8003868:	edc7 1a01 	vstr	s3, [r7, #4]
 double mapped_value = 0;
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	e9c7 3406 	strd	r3, r4, [r7, #24]
 mapped_value = ( (s2-s1)*((value-r1)/(r2-r1))+(s1) );
 8003878:	ed97 7a01 	vldr	s14, [r7, #4]
 800387c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800388e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003892:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003896:	edd7 6a03 	vldr	s13, [r7, #12]
 800389a:	edd7 7a04 	vldr	s15, [r7, #16]
 800389e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80038a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b2:	ee17 0a90 	vmov	r0, s15
 80038b6:	f7fc fdeb 	bl	8000490 <__aeabi_f2d>
 80038ba:	4603      	mov	r3, r0
 80038bc:	460c      	mov	r4, r1
 80038be:	e9c7 3406 	strd	r3, r4, [r7, #24]
 return mapped_value;
 80038c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80038c6:	ec44 3b17 	vmov	d7, r3, r4

}
 80038ca:	eeb0 0a47 	vmov.f32	s0, s14
 80038ce:	eef0 0a67 	vmov.f32	s1, s15
 80038d2:	3724      	adds	r7, #36	; 0x24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd90      	pop	{r4, r7, pc}

080038d8 <CCRval>:

int CCRval(int degrees)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 double temp = 0;
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	f04f 0400 	mov.w	r4, #0
 80038e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 temp = hamaraMap(degrees,-90.0,90.0,0.05,0.10);
 80038ec:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003938 <CCRval+0x60>
 80038f0:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800393c <CCRval+0x64>
 80038f4:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003940 <CCRval+0x68>
 80038f8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003944 <CCRval+0x6c>
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ffa9 	bl	8003854 <hamaraMap>
 8003902:	ed87 0b04 	vstr	d0, [r7, #16]
 int value;
 value = 20000*temp;
 8003906:	a30a      	add	r3, pc, #40	; (adr r3, 8003930 <CCRval+0x58>)
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003910:	f7fc fe16 	bl	8000540 <__aeabi_dmul>
 8003914:	4603      	mov	r3, r0
 8003916:	460c      	mov	r4, r1
 8003918:	4618      	mov	r0, r3
 800391a:	4621      	mov	r1, r4
 800391c:	f7fd f822 	bl	8000964 <__aeabi_d2iz>
 8003920:	4603      	mov	r3, r0
 8003922:	60fb      	str	r3, [r7, #12]
 return value;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bd90      	pop	{r4, r7, pc}
 800392e:	bf00      	nop
 8003930:	00000000 	.word	0x00000000
 8003934:	40d38800 	.word	0x40d38800
 8003938:	3dcccccd 	.word	0x3dcccccd
 800393c:	3d4ccccd 	.word	0x3d4ccccd
 8003940:	42b40000 	.word	0x42b40000
 8003944:	c2b40000 	.word	0xc2b40000

08003948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800394c:	f7fd f832 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003950:	f000 f856 	bl	8003a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003954:	f000 f9ee 	bl	8003d34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003958:	f000 f8b4 	bl	8003ac4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800395c:	f000 f8f2 	bl	8003b44 <MX_SPI1_Init>
  MX_TIM2_Init();
 8003960:	f000 f92e 	bl	8003bc0 <MX_TIM2_Init>
  MX_USB_PCD_Init();
 8003964:	f000 f9c4 	bl	8003cf0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003968:	2100      	movs	r1, #0
 800396a:	4822      	ldr	r0, [pc, #136]	; (80039f4 <main+0xac>)
 800396c:	f7ff f882 	bl	8002a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8003970:	2104      	movs	r1, #4
 8003972:	4820      	ldr	r0, [pc, #128]	; (80039f4 <main+0xac>)
 8003974:	f7ff f87e 	bl	8002a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8003978:	2108      	movs	r1, #8
 800397a:	481e      	ldr	r0, [pc, #120]	; (80039f4 <main+0xac>)
 800397c:	f7ff f87a 	bl	8002a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8003980:	210c      	movs	r1, #12
 8003982:	481c      	ldr	r0, [pc, #112]	; (80039f4 <main+0xac>)
 8003984:	f7ff f876 	bl	8002a74 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Wval[0] = CCRval(angle[0]);
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <main+0xb0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ffa3 	bl	80038d8 <CCRval>
 8003992:	4602      	mov	r2, r0
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <main+0xb4>)
 8003996:	601a      	str	r2, [r3, #0]
	  Wval[1] = CCRval(angle[1]);
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <main+0xb0>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff9b 	bl	80038d8 <CCRval>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b15      	ldr	r3, [pc, #84]	; (80039fc <main+0xb4>)
 80039a6:	605a      	str	r2, [r3, #4]
	  Wval[2] = CCRval(angle[2]);
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <main+0xb0>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff93 	bl	80038d8 <CCRval>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <main+0xb4>)
 80039b6:	609a      	str	r2, [r3, #8]
	  Wval[3] = CCRval(angle[3]);
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <main+0xb0>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff8b 	bl	80038d8 <CCRval>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <main+0xb4>)
 80039c6:	60da      	str	r2, [r3, #12]
	  htim2.Instance->CCR1 = Wval[0];
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <main+0xb4>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <main+0xac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	635a      	str	r2, [r3, #52]	; 0x34
	  htim2.Instance->CCR2 = Wval[1];
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <main+0xb4>)
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <main+0xac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
	  htim2.Instance->CCR3 = Wval[2];
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <main+0xb4>)
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <main+0xac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim2.Instance->CCR4 = Wval[3];
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <main+0xb4>)
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <main+0xac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
	  Wval[0] = CCRval(angle[0]);
 80039f0:	e7ca      	b.n	8003988 <main+0x40>
 80039f2:	bf00      	nop
 80039f4:	200000fc 	.word	0x200000fc
 80039f8:	20000008 	.word	0x20000008
 80039fc:	2000003c 	.word	0x2000003c

08003a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b09e      	sub	sp, #120	; 0x78
 8003a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a0a:	2228      	movs	r2, #40	; 0x28
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fc20 	bl	8004254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a24:	463b      	mov	r3, r7
 8003a26:	223c      	movs	r2, #60	; 0x3c
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fc12 	bl	8004254 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003a30:	2303      	movs	r3, #3
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a42:	2310      	movs	r3, #16
 8003a44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a46:	2302      	movs	r3, #2
 8003a48:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a4e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003a50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a54:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd fc94 	bl	8001388 <HAL_RCC_OscConfig>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003a66:	f000 f9e5 	bl	8003e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a72:	2300      	movs	r3, #0
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fb6c 	bl	8002164 <HAL_RCC_ClockConfig>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a92:	f000 f9cf 	bl	8003e34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <SystemClock_Config+0xc0>)
 8003a98:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8003a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fd42 	bl	8002530 <HAL_RCCEx_PeriphCLKConfig>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003ab2:	f000 f9bf 	bl	8003e34 <Error_Handler>
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	3778      	adds	r7, #120	; 0x78
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	00020020 	.word	0x00020020

08003ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003aca:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <MX_I2C1_Init+0x78>)
 8003acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <MX_I2C1_Init+0x7c>)
 8003ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003afe:	480e      	ldr	r0, [pc, #56]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003b00:	f7fd fa3a 	bl	8000f78 <HAL_I2C_Init>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b0a:	f000 f993 	bl	8003e34 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4809      	ldr	r0, [pc, #36]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003b12:	f7fd fac0 	bl	8001096 <HAL_I2CEx_ConfigAnalogFilter>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b1c:	f000 f98a 	bl	8003e34 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b20:	2100      	movs	r1, #0
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <MX_I2C1_Init+0x74>)
 8003b24:	f7fd fb02 	bl	800112c <HAL_I2CEx_ConfigDigitalFilter>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003b2e:	f000 f981 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	2000004c 	.word	0x2000004c
 8003b3c:	40005400 	.word	0x40005400
 8003b40:	2000090e 	.word	0x2000090e

08003b44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <MX_SPI1_Init+0x78>)
 8003b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003b62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b92:	2207      	movs	r2, #7
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ba2:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <MX_SPI1_Init+0x74>)
 8003ba4:	f7fe fe74 	bl	8002890 <HAL_SPI_Init>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003bae:	f000 f941 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000098 	.word	0x20000098
 8003bbc:	40013000 	.word	0x40013000

08003bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08e      	sub	sp, #56	; 0x38
 8003bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	609a      	str	r2, [r3, #8]
 8003bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003be0:	463b      	mov	r3, r7
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	615a      	str	r2, [r3, #20]
 8003bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8003bfa:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003bfc:	2230      	movs	r2, #48	; 0x30
 8003bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c00:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c08:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c1a:	4834      	ldr	r0, [pc, #208]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c1c:	f7fe feca 	bl	80029b4 <HAL_TIM_Base_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c26:	f000 f905 	bl	8003e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c34:	4619      	mov	r1, r3
 8003c36:	482d      	ldr	r0, [pc, #180]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c38:	f7fe ff66 	bl	8002b08 <HAL_TIM_ConfigClockSource>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003c42:	f000 f8f7 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c46:	4829      	ldr	r0, [pc, #164]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c48:	f7fe fedf 	bl	8002a0a <HAL_TIM_PWM_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003c52:	f000 f8ef 	bl	8003e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c5e:	f107 031c 	add.w	r3, r7, #28
 8003c62:	4619      	mov	r1, r3
 8003c64:	4821      	ldr	r0, [pc, #132]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c66:	f7ff fccb 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c70:	f000 f8e0 	bl	8003e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c74:	2360      	movs	r3, #96	; 0x60
 8003c76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c84:	463b      	mov	r3, r7
 8003c86:	2200      	movs	r2, #0
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4818      	ldr	r0, [pc, #96]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003c8c:	f7ff fba0 	bl	80033d0 <HAL_TIM_PWM_ConfigChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003c96:	f000 f8cd 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4812      	ldr	r0, [pc, #72]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003ca2:	f7ff fb95 	bl	80033d0 <HAL_TIM_PWM_ConfigChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003cac:	f000 f8c2 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	480d      	ldr	r0, [pc, #52]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003cb8:	f7ff fb8a 	bl	80033d0 <HAL_TIM_PWM_ConfigChannel>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8003cc2:	f000 f8b7 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	220c      	movs	r2, #12
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4807      	ldr	r0, [pc, #28]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003cce:	f7ff fb7f 	bl	80033d0 <HAL_TIM_PWM_ConfigChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8003cd8:	f000 f8ac 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <MX_TIM2_Init+0x12c>)
 8003cde:	f000 f979 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8003ce2:	bf00      	nop
 8003ce4:	3738      	adds	r7, #56	; 0x38
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	200000fc 	.word	0x200000fc

08003cf0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <MX_USB_PCD_Init+0x3c>)
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <MX_USB_PCD_Init+0x40>)
 8003cf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <MX_USB_PCD_Init+0x3c>)
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <MX_USB_PCD_Init+0x3c>)
 8003d02:	2202      	movs	r2, #2
 8003d04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <MX_USB_PCD_Init+0x3c>)
 8003d08:	2202      	movs	r2, #2
 8003d0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <MX_USB_PCD_Init+0x3c>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <MX_USB_PCD_Init+0x3c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003d18:	4804      	ldr	r0, [pc, #16]	; (8003d2c <MX_USB_PCD_Init+0x3c>)
 8003d1a:	f7fd fa55 	bl	80011c8 <HAL_PCD_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8003d24:	f000 f886 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	2000013c 	.word	0x2000013c
 8003d30:	40005c00 	.word	0x40005c00

08003d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d4a:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d54:	6153      	str	r3, [r2, #20]
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d6c:	6153      	str	r3, [r2, #20]
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d7a:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d84:	6153      	str	r3, [r2, #20]
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	6153      	str	r3, [r2, #20]
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003daa:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6153      	str	r3, [r2, #20]
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <MX_GPIO_Init+0xf4>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f64f 7108 	movw	r1, #65288	; 0xff08
 8003dc8:	4818      	ldr	r0, [pc, #96]	; (8003e2c <MX_GPIO_Init+0xf8>)
 8003dca:	f7fd f8bd 	bl	8000f48 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8003dce:	2337      	movs	r3, #55	; 0x37
 8003dd0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <MX_GPIO_Init+0xfc>)
 8003dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dda:	f107 0314 	add.w	r3, r7, #20
 8003dde:	4619      	mov	r1, r3
 8003de0:	4812      	ldr	r0, [pc, #72]	; (8003e2c <MX_GPIO_Init+0xf8>)
 8003de2:	f7fc ff33 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8003de6:	f64f 7308 	movw	r3, #65288	; 0xff08
 8003dea:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dec:	2301      	movs	r3, #1
 8003dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df4:	2300      	movs	r3, #0
 8003df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	480b      	ldr	r0, [pc, #44]	; (8003e2c <MX_GPIO_Init+0xf8>)
 8003e00:	f7fc ff24 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e04:	2301      	movs	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	4619      	mov	r1, r3
 8003e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e1a:	f7fc ff17 	bl	8000c4c <HAL_GPIO_Init>

}
 8003e1e:	bf00      	nop
 8003e20:	3728      	adds	r7, #40	; 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	48001000 	.word	0x48001000
 8003e30:	10120000 	.word	0x10120000

08003e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_MspInit+0x44>)
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <HAL_MspInit+0x44>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6193      	str	r3, [r2, #24]
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_MspInit+0x44>)
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_MspInit+0x44>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <HAL_MspInit+0x44>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	61d3      	str	r3, [r2, #28]
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_MspInit+0x44>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e7a:	2007      	movs	r0, #7
 8003e7c:	f7fc feb2 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000

08003e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	; 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <HAL_I2C_MspInit+0x7c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d127      	bne.n	8003efe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_I2C_MspInit+0x80>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <HAL_I2C_MspInit+0x80>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb8:	6153      	str	r3, [r2, #20]
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_I2C_MspInit+0x80>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003ec6:	23c0      	movs	r3, #192	; 0xc0
 8003ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eca:	2312      	movs	r3, #18
 8003ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	4619      	mov	r1, r3
 8003ee0:	480b      	ldr	r0, [pc, #44]	; (8003f10 <HAL_I2C_MspInit+0x84>)
 8003ee2:	f7fc feb3 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_I2C_MspInit+0x80>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <HAL_I2C_MspInit+0x80>)
 8003eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ef0:	61d3      	str	r3, [r2, #28]
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_I2C_MspInit+0x80>)
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003efe:	bf00      	nop
 8003f00:	3728      	adds	r7, #40	; 0x28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40005400 	.word	0x40005400
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	48000400 	.word	0x48000400

08003f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0314 	add.w	r3, r7, #20
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_SPI_MspInit+0x7c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d128      	bne.n	8003f88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <HAL_SPI_MspInit+0x80>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <HAL_SPI_MspInit+0x80>)
 8003f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f40:	6193      	str	r3, [r2, #24]
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_SPI_MspInit+0x80>)
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_SPI_MspInit+0x80>)
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_SPI_MspInit+0x80>)
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f58:	6153      	str	r3, [r2, #20]
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_SPI_MspInit+0x80>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003f66:	23e0      	movs	r3, #224	; 0xe0
 8003f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f72:	2303      	movs	r3, #3
 8003f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f76:	2305      	movs	r3, #5
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f84:	f7fc fe62 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f88:	bf00      	nop
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40013000 	.word	0x40013000
 8003f94:	40021000 	.word	0x40021000

08003f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_TIM_Base_MspInit+0x38>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <HAL_TIM_Base_MspInit+0x38>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	61d3      	str	r3, [r2, #28]
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_TIM_Base_MspInit+0x38>)
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d11d      	bne.n	8004032 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_TIM_MspPostInit+0x68>)
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <HAL_TIM_MspPostInit+0x68>)
 8003ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004000:	6153      	str	r3, [r2, #20]
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <HAL_TIM_MspPostInit+0x68>)
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800400e:	f248 030e 	movw	r3, #32782	; 0x800e
 8004012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004014:	2302      	movs	r3, #2
 8004016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004020:	2301      	movs	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	4619      	mov	r1, r3
 800402a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402e:	f7fc fe0d 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004032:	bf00      	nop
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_PCD_MspInit+0x80>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d129      	bne.n	80040b6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <HAL_PCD_MspInit+0x84>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <HAL_PCD_MspInit+0x84>)
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	6153      	str	r3, [r2, #20]
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <HAL_PCD_MspInit+0x84>)
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800407a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800407e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004080:	2302      	movs	r3, #2
 8004082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004088:	2303      	movs	r3, #3
 800408a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800408c:	230e      	movs	r3, #14
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	4619      	mov	r1, r3
 8004096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800409a:	f7fc fdd7 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_PCD_MspInit+0x84>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <HAL_PCD_MspInit+0x84>)
 80040a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040a8:	61d3      	str	r3, [r2, #28]
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_PCD_MspInit+0x84>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80040b6:	bf00      	nop
 80040b8:	3728      	adds	r7, #40	; 0x28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40005c00 	.word	0x40005c00
 80040c4:	40021000 	.word	0x40021000

080040c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040da:	e7fe      	b.n	80040da <HardFault_Handler+0x4>

080040dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040e0:	e7fe      	b.n	80040e0 <MemManage_Handler+0x4>

080040e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040e6:	e7fe      	b.n	80040e6 <BusFault_Handler+0x4>

080040e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040ec:	e7fe      	b.n	80040ec <UsageFault_Handler+0x4>

080040ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800411c:	f7fc fc90 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}

08004124 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <SystemInit+0x84>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <SystemInit+0x84>)
 8004130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004138:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <SystemInit+0x88>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <SystemInit+0x88>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <SystemInit+0x88>)
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4918      	ldr	r1, [pc, #96]	; (80041ac <SystemInit+0x88>)
 800414a:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <SystemInit+0x8c>)
 800414c:	4013      	ands	r3, r2
 800414e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004150:	4b16      	ldr	r3, [pc, #88]	; (80041ac <SystemInit+0x88>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <SystemInit+0x88>)
 8004156:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800415a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <SystemInit+0x88>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a11      	ldr	r2, [pc, #68]	; (80041ac <SystemInit+0x88>)
 8004166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <SystemInit+0x88>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a0e      	ldr	r2, [pc, #56]	; (80041ac <SystemInit+0x88>)
 8004172:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004176:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <SystemInit+0x88>)
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <SystemInit+0x88>)
 800417e:	f023 030f 	bic.w	r3, r3, #15
 8004182:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <SystemInit+0x88>)
 8004186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004188:	4908      	ldr	r1, [pc, #32]	; (80041ac <SystemInit+0x88>)
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <SystemInit+0x90>)
 800418c:	4013      	ands	r3, r2
 800418e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <SystemInit+0x88>)
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <SystemInit+0x84>)
 8004198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800419c:	609a      	str	r2, [r3, #8]
#endif
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00
 80041ac:	40021000 	.word	0x40021000
 80041b0:	f87fc00c 	.word	0xf87fc00c
 80041b4:	ff00fccc 	.word	0xff00fccc

080041b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80041bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80041be:	e003      	b.n	80041c8 <LoopCopyDataInit>

080041c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80041c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80041c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80041c6:	3104      	adds	r1, #4

080041c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80041c8:	480b      	ldr	r0, [pc, #44]	; (80041f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80041cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80041ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80041d0:	d3f6      	bcc.n	80041c0 <CopyDataInit>
	ldr	r2, =_sbss
 80041d2:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <LoopForever+0x12>)
	b	LoopFillZerobss
 80041d4:	e002      	b.n	80041dc <LoopFillZerobss>

080041d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80041d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80041d8:	f842 3b04 	str.w	r3, [r2], #4

080041dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <LoopForever+0x16>)
	cmp	r2, r3
 80041de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80041e0:	d3f9      	bcc.n	80041d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80041e2:	f7ff ff9f 	bl	8004124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041e6:	f000 f811 	bl	800420c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041ea:	f7ff fbad 	bl	8003948 <main>

080041ee <LoopForever>:

LoopForever:
    b LoopForever
 80041ee:	e7fe      	b.n	80041ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041f0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80041f4:	080042b4 	.word	0x080042b4
	ldr	r0, =_sdata
 80041f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80041fc:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8004200:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8004204:	200004e4 	.word	0x200004e4

08004208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004208:	e7fe      	b.n	8004208 <ADC1_2_IRQHandler>
	...

0800420c <__libc_init_array>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4e0d      	ldr	r6, [pc, #52]	; (8004244 <__libc_init_array+0x38>)
 8004210:	4c0d      	ldr	r4, [pc, #52]	; (8004248 <__libc_init_array+0x3c>)
 8004212:	1ba4      	subs	r4, r4, r6
 8004214:	10a4      	asrs	r4, r4, #2
 8004216:	2500      	movs	r5, #0
 8004218:	42a5      	cmp	r5, r4
 800421a:	d109      	bne.n	8004230 <__libc_init_array+0x24>
 800421c:	4e0b      	ldr	r6, [pc, #44]	; (800424c <__libc_init_array+0x40>)
 800421e:	4c0c      	ldr	r4, [pc, #48]	; (8004250 <__libc_init_array+0x44>)
 8004220:	f000 f820 	bl	8004264 <_init>
 8004224:	1ba4      	subs	r4, r4, r6
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	2500      	movs	r5, #0
 800422a:	42a5      	cmp	r5, r4
 800422c:	d105      	bne.n	800423a <__libc_init_array+0x2e>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004234:	4798      	blx	r3
 8004236:	3501      	adds	r5, #1
 8004238:	e7ee      	b.n	8004218 <__libc_init_array+0xc>
 800423a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800423e:	4798      	blx	r3
 8004240:	3501      	adds	r5, #1
 8004242:	e7f2      	b.n	800422a <__libc_init_array+0x1e>
 8004244:	080042ac 	.word	0x080042ac
 8004248:	080042ac 	.word	0x080042ac
 800424c:	080042ac 	.word	0x080042ac
 8004250:	080042b0 	.word	0x080042b0

08004254 <memset>:
 8004254:	4402      	add	r2, r0
 8004256:	4603      	mov	r3, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <_init>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	bf00      	nop
 8004268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426a:	bc08      	pop	{r3}
 800426c:	469e      	mov	lr, r3
 800426e:	4770      	bx	lr

08004270 <_fini>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr
