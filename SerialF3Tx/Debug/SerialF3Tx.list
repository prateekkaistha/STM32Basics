
SerialF3Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003110  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d0  080032d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032d0  080032d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032d0  080032d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000000c  080032e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080032e4  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a93  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000230c  00000000  00000000  00033acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  00035de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  000369e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b060  00000000  00000000  00037508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b34e  00000000  00000000  00052568  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000960fb  00000000  00000000  0005d8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f39b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  000f3a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003280 	.word	0x08003280

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003280 	.word	0x08003280

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f90d 	bl	80003f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fe4e 	bl	8002e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f917 	bl	8000446 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 f8ed 	bl	800040e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	da0b      	bge.n	8000324 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <NVIC_SetPriority+0x4c>)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	3b04      	subs	r3, #4
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000322:	e009      	b.n	8000338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4907      	ldr	r1, [pc, #28]	; (8000348 <NVIC_SetPriority+0x50>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43da      	mvns	r2, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	401a      	ands	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43d9      	mvns	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4313      	orrs	r3, r2
         );
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3724      	adds	r7, #36	; 0x24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c4:	d301      	bcc.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e00f      	b.n	80003ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <SysTick_Config+0x40>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	210f      	movs	r1, #15
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003d8:	f7ff ff8e 	bl	80002f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <SysTick_Config+0x40>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SysTick_Config+0x40>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	e000e010 	.word	0xe000e010

080003f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ff47 	bl	8000294 <NVIC_SetPriorityGrouping>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	4603      	mov	r3, r0
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
 800041a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000420:	f7ff ff5c 	bl	80002dc <NVIC_GetPriorityGrouping>
 8000424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	6978      	ldr	r0, [r7, #20]
 800042c:	f7ff ff8e 	bl	800034c <NVIC_EncodePriority>
 8000430:	4602      	mov	r2, r0
 8000432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff5d 	bl	80002f8 <NVIC_SetPriority>
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ffb0 	bl	80003b4 <SysTick_Config>
 8000454:	4603      	mov	r3, r0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000476:	e154      	b.n	8000722 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f000 8146 	beq.w	800071c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d003      	beq.n	80004a0 <HAL_GPIO_Init+0x40>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b12      	cmp	r3, #18
 800049e:	d123      	bne.n	80004e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	08da      	lsrs	r2, r3, #3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3208      	adds	r2, #8
 80004a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	220f      	movs	r2, #15
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	691a      	ldr	r2, [r3, #16]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f003 0307 	and.w	r3, r3, #7
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	693a      	ldr	r2, [r7, #16]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	08da      	lsrs	r2, r3, #3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3208      	adds	r2, #8
 80004e2:	6939      	ldr	r1, [r7, #16]
 80004e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	2203      	movs	r2, #3
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f003 0203 	and.w	r2, r3, #3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <HAL_GPIO_Init+0xdc>
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d007      	beq.n	800053c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	2b11      	cmp	r3, #17
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d130      	bne.n	800059e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4313      	orrs	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43db      	mvns	r3, r3
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	4013      	ands	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	f003 0201 	and.w	r2, r3, #1
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4313      	orrs	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2203      	movs	r2, #3
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	4013      	ands	r3, r2
 80005b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 80a0 	beq.w	800071c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a57      	ldr	r2, [pc, #348]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b55      	ldr	r3, [pc, #340]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80005f4:	4a53      	ldr	r2, [pc, #332]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	3302      	adds	r3, #2
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	220f      	movs	r2, #15
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800061e:	d019      	beq.n	8000654 <HAL_GPIO_Init+0x1f4>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a49      	ldr	r2, [pc, #292]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d013      	beq.n	8000650 <HAL_GPIO_Init+0x1f0>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a48      	ldr	r2, [pc, #288]	; (800074c <HAL_GPIO_Init+0x2ec>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d00d      	beq.n	800064c <HAL_GPIO_Init+0x1ec>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a47      	ldr	r2, [pc, #284]	; (8000750 <HAL_GPIO_Init+0x2f0>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d007      	beq.n	8000648 <HAL_GPIO_Init+0x1e8>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a46      	ldr	r2, [pc, #280]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d101      	bne.n	8000644 <HAL_GPIO_Init+0x1e4>
 8000640:	2304      	movs	r3, #4
 8000642:	e008      	b.n	8000656 <HAL_GPIO_Init+0x1f6>
 8000644:	2305      	movs	r3, #5
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1f6>
 8000648:	2303      	movs	r3, #3
 800064a:	e004      	b.n	8000656 <HAL_GPIO_Init+0x1f6>
 800064c:	2302      	movs	r3, #2
 800064e:	e002      	b.n	8000656 <HAL_GPIO_Init+0x1f6>
 8000650:	2301      	movs	r3, #1
 8000652:	e000      	b.n	8000656 <HAL_GPIO_Init+0x1f6>
 8000654:	2300      	movs	r3, #0
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	f002 0203 	and.w	r2, r2, #3
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	4093      	lsls	r3, r2
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	4313      	orrs	r3, r2
 8000664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000666:	4937      	ldr	r1, [pc, #220]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	089b      	lsrs	r3, r3, #2
 800066c:	3302      	adds	r3, #2
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000674:	4b38      	ldr	r3, [pc, #224]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	43db      	mvns	r3, r3
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d003      	beq.n	8000698 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	4313      	orrs	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000698:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	4013      	ands	r3, r2
 80006ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4313      	orrs	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006c2:	4a25      	ldr	r2, [pc, #148]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	43db      	mvns	r3, r3
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	4013      	ands	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	4013      	ands	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4313      	orrs	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000716:	4a10      	ldr	r2, [pc, #64]	; (8000758 <HAL_GPIO_Init+0x2f8>)
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	3301      	adds	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	fa22 f303 	lsr.w	r3, r2, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	f47f aea3 	bne.w	8000478 <HAL_GPIO_Init+0x18>
  }
}
 8000732:	bf00      	nop
 8000734:	371c      	adds	r7, #28
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000
 8000748:	48000400 	.word	0x48000400
 800074c:	48000800 	.word	0x48000800
 8000750:	48000c00 	.word	0x48000c00
 8000754:	48001000 	.word	0x48001000
 8000758:	40010400 	.word	0x40010400

0800075c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
 8000768:	4613      	mov	r3, r2
 800076a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800076c:	787b      	ldrb	r3, [r7, #1]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000772:	887a      	ldrh	r2, [r7, #2]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000778:	e002      	b.n	8000780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800077a:	887a      	ldrh	r2, [r7, #2]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e081      	b.n	80008a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d106      	bne.n	80007b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f002 fb8a 	bl	8002ecc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2224      	movs	r2, #36	; 0x24
 80007bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f022 0201 	bic.w	r2, r2, #1
 80007ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80007dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	689a      	ldr	r2, [r3, #8]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d107      	bne.n	8000806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	e006      	b.n	8000814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d104      	bne.n	8000826 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000824:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000838:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68da      	ldr	r2, [r3, #12]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000848:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	691a      	ldr	r2, [r3, #16]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	ea42 0103 	orr.w	r1, r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	021a      	lsls	r2, r3, #8
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	430a      	orrs	r2, r1
 8000862:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69d9      	ldr	r1, [r3, #28]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a1a      	ldr	r2, [r3, #32]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	430a      	orrs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f042 0201 	orr.w	r2, r2, #1
 8000882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2220      	movs	r2, #32
 800088e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b20      	cmp	r3, #32
 80008be:	d138      	bne.n	8000932 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d101      	bne.n	80008ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80008ca:	2302      	movs	r3, #2
 80008cc:	e032      	b.n	8000934 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2224      	movs	r2, #36	; 0x24
 80008da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 0201 	bic.w	r2, r2, #1
 80008ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6819      	ldr	r1, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	430a      	orrs	r2, r1
 800090c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f042 0201 	orr.w	r2, r2, #1
 800091c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2220      	movs	r2, #32
 8000922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000932:	2302      	movs	r3, #2
  }
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b20      	cmp	r3, #32
 8000958:	d139      	bne.n	80009ce <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000960:	2b01      	cmp	r3, #1
 8000962:	d101      	bne.n	8000968 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8000964:	2302      	movs	r3, #2
 8000966:	e033      	b.n	80009d0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2224      	movs	r2, #36	; 0x24
 8000974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f022 0201 	bic.w	r2, r2, #1
 8000986:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000996:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f042 0201 	orr.w	r2, r2, #1
 80009b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2220      	movs	r2, #32
 80009be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80009ce:	2302      	movs	r3, #2
  }
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d101      	bne.n	80009f6 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e0ce      	b.n	8000b94 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d106      	bne.n	8000a10 <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f002 fb26 	bl	800305c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2203      	movs	r2, #3
 8000a14:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e040      	b.n	8000aa0 <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4613      	mov	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	3329      	adds	r3, #41	; 0x29
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	b2d8      	uxtb	r0, r3
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	440b      	add	r3, r1
 8000a44:	3328      	adds	r3, #40	; 0x28
 8000a46:	4602      	mov	r2, r0
 8000a48:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	1a9b      	subs	r3, r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	332b      	adds	r3, #43	; 0x2b
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4613      	mov	r3, r2
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3334      	adds	r3, #52	; 0x34
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4613      	mov	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	3338      	adds	r3, #56	; 0x38
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	1a9b      	subs	r3, r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	440b      	add	r3, r1
 8000a94:	333c      	adds	r3, #60	; 0x3c
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d3b9      	bcc.n	8000a1e <HAL_PCD_Init+0x42>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e046      	b.n	8000b3e <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	1a9b      	subs	r3, r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	440b      	add	r3, r1
 8000abe:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	b2d8      	uxtb	r0, r3
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	1a9b      	subs	r3, r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4613      	mov	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	1a9b      	subs	r3, r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4613      	mov	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	440b      	add	r3, r1
 8000b1a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4613      	mov	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3b3      	bcc.n	8000ab0 <HAL_PCD_Init+0xd4>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0U*/
 hpcd->Instance->CNTR = 0U;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0U;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000b70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000b74:	60bb      	str	r3, [r7, #8]
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	b292      	uxth	r2, r2
 8000b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	f000 beda 	b.w	800196a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 816e 	beq.w	8000ea2 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bc6:	4bb5      	ldr	r3, [pc, #724]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 030c 	and.w	r3, r3, #12
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d00c      	beq.n	8000bec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd2:	4bb2      	ldr	r3, [pc, #712]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d15a      	bne.n	8000c94 <HAL_RCC_OscConfig+0xf8>
 8000bde:	4baf      	ldr	r3, [pc, #700]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bea:	d153      	bne.n	8000c94 <HAL_RCC_OscConfig+0xf8>
 8000bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c04:	fab3 f383 	clz	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d102      	bne.n	8000c1e <HAL_RCC_OscConfig+0x82>
 8000c18:	4ba0      	ldr	r3, [pc, #640]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	e015      	b.n	8000c4a <HAL_RCC_OscConfig+0xae>
 8000c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c22:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c36:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c3a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c46:	4b95      	ldr	r3, [pc, #596]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c4e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c52:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c56:	fa92 f2a2 	rbit	r2, r2
 8000c5a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000c5e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b252      	sxtb	r2, r2
 8000c68:	f042 0220 	orr.w	r2, r2, #32
 8000c6c:	b252      	sxtb	r2, r2
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	f002 021f 	and.w	r2, r2, #31
 8000c74:	2101      	movs	r1, #1
 8000c76:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 810f 	beq.w	8000ea0 <HAL_RCC_OscConfig+0x304>
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f040 8109 	bne.w	8000ea0 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f000 be6b 	b.w	800196a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x112>
 8000ca0:	4b7e      	ldr	r3, [pc, #504]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a7d      	ldr	r2, [pc, #500]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e030      	b.n	8000d10 <HAL_RCC_OscConfig+0x174>
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10c      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x136>
 8000cb8:	4b78      	ldr	r3, [pc, #480]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a77      	ldr	r2, [pc, #476]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a74      	ldr	r2, [pc, #464]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e01e      	b.n	8000d10 <HAL_RCC_OscConfig+0x174>
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cdc:	d10c      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x15c>
 8000cde:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a6e      	ldr	r2, [pc, #440]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b6c      	ldr	r3, [pc, #432]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a6b      	ldr	r2, [pc, #428]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e00b      	b.n	8000d10 <HAL_RCC_OscConfig+0x174>
 8000cf8:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a67      	ldr	r2, [pc, #412]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	4b65      	ldr	r3, [pc, #404]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a64      	ldr	r2, [pc, #400]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d10:	4b62      	ldr	r3, [pc, #392]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	f023 020f 	bic.w	r2, r3, #15
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	495f      	ldr	r1, [pc, #380]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d05a      	beq.n	8000de4 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff faa5 	bl	800027c <HAL_GetTick>
 8000d32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff faa0 	bl	800027c <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b64      	cmp	r3, #100	; 0x64
 8000d46:	d902      	bls.n	8000d4e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	f000 be0e 	b.w	800196a <HAL_RCC_OscConfig+0xdce>
 8000d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d52:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000d62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	095b      	lsrs	r3, r3, #5
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d102      	bne.n	8000d80 <HAL_RCC_OscConfig+0x1e4>
 8000d7a:	4b48      	ldr	r3, [pc, #288]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	e015      	b.n	8000dac <HAL_RCC_OscConfig+0x210>
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d98:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d9c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000da8:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db0:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000db4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000db8:	fa92 f2a2 	rbit	r2, r2
 8000dbc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000dc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	b252      	sxtb	r2, r2
 8000dca:	f042 0220 	orr.w	r2, r2, #32
 8000dce:	b252      	sxtb	r2, r2
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	f002 021f 	and.w	r2, r2, #31
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0aa      	beq.n	8000d38 <HAL_RCC_OscConfig+0x19c>
 8000de2:	e05e      	b.n	8000ea2 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fa4a 	bl	800027c <HAL_GetTick>
 8000de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dec:	e00a      	b.n	8000e04 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dee:	f7ff fa45 	bl	800027c <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b64      	cmp	r3, #100	; 0x64
 8000dfc:	d902      	bls.n	8000e04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	f000 bdb3 	b.w	800196a <HAL_RCC_OscConfig+0xdce>
 8000e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e08:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e10:	fa93 f3a3 	rbit	r3, r3
 8000e14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000e18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1c:	fab3 f383 	clz	r3, r3
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d102      	bne.n	8000e36 <HAL_RCC_OscConfig+0x29a>
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	e015      	b.n	8000e62 <HAL_RCC_OscConfig+0x2c6>
 8000e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_RCC_OscConfig+0x300>)
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e66:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e6a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e6e:	fa92 f2a2 	rbit	r2, r2
 8000e72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000e76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e7a:	fab2 f282 	clz	r2, r2
 8000e7e:	b252      	sxtb	r2, r2
 8000e80:	f042 0220 	orr.w	r2, r2, #32
 8000e84:	b252      	sxtb	r2, r2
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	f002 021f 	and.w	r2, r2, #31
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1aa      	bne.n	8000dee <HAL_RCC_OscConfig+0x252>
 8000e98:	e003      	b.n	8000ea2 <HAL_RCC_OscConfig+0x306>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 8170 	beq.w	8001192 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eb2:	4bd0      	ldr	r3, [pc, #832]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ebe:	4bcd      	ldr	r3, [pc, #820]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d16d      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x40a>
 8000eca:	4bca      	ldr	r3, [pc, #808]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d167      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x40a>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000edc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000ee8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eec:	fab3 f383 	clz	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d102      	bne.n	8000f06 <HAL_RCC_OscConfig+0x36a>
 8000f00:	4bbc      	ldr	r3, [pc, #752]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	e013      	b.n	8000f2e <HAL_RCC_OscConfig+0x392>
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f1e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f2a:	4bb2      	ldr	r3, [pc, #712]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000f34:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f38:	fa92 f2a2 	rbit	r2, r2
 8000f3c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000f40:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f44:	fab2 f282 	clz	r2, r2
 8000f48:	b252      	sxtb	r2, r2
 8000f4a:	f042 0220 	orr.w	r2, r2, #32
 8000f4e:	b252      	sxtb	r2, r2
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	f002 021f 	and.w	r2, r2, #31
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d007      	beq.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d002      	beq.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f000 bcfc 	b.w	800196a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f72:	4ba0      	ldr	r3, [pc, #640]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6959      	ldr	r1, [r3, #20]
 8000f80:	23f8      	movs	r3, #248	; 0xf8
 8000f82:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000f92:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	4995      	ldr	r1, [pc, #596]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa4:	e0f5      	b.n	8001192 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8085 	beq.w	80010bc <HAL_RCC_OscConfig+0x520>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000fc4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2301      	movs	r3, #1
 8000fda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff f94e 	bl	800027c <HAL_GetTick>
 8000fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe6:	f7ff f949 	bl	800027c <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d902      	bls.n	8000ffc <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f000 bcb7 	b.w	800196a <HAL_RCC_OscConfig+0xdce>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800100e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_RCC_OscConfig+0x490>
 8001026:	4b73      	ldr	r3, [pc, #460]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e013      	b.n	8001054 <HAL_RCC_OscConfig+0x4b8>
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001044:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001050:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	2202      	movs	r2, #2
 8001056:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800105a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800105e:	fa92 f2a2 	rbit	r2, r2
 8001062:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001066:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800106a:	fab2 f282 	clz	r2, r2
 800106e:	b252      	sxtb	r2, r2
 8001070:	f042 0220 	orr.w	r2, r2, #32
 8001074:	b252      	sxtb	r2, r2
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f002 021f 	and.w	r2, r2, #31
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ae      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6959      	ldr	r1, [r3, #20]
 8001096:	23f8      	movs	r3, #248	; 0xf8
 8001098:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80010a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	494f      	ldr	r1, [pc, #316]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
 80010ba:	e06a      	b.n	8001192 <HAL_RCC_OscConfig+0x5f6>
 80010bc:	2301      	movs	r3, #1
 80010be:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80010ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	461a      	mov	r2, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff f8c9 	bl	800027c <HAL_GetTick>
 80010ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	e00a      	b.n	8001106 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f0:	f7ff f8c4 	bl	800027c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d902      	bls.n	8001106 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	f000 bc32 	b.w	800196a <HAL_RCC_OscConfig+0xdce>
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001118:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111c:	fab3 f383 	clz	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d102      	bne.n	8001136 <HAL_RCC_OscConfig+0x59a>
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	e013      	b.n	800115e <HAL_RCC_OscConfig+0x5c2>
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800114e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_RCC_OscConfig+0x658>)
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	2202      	movs	r2, #2
 8001160:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001164:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001168:	fa92 f2a2 	rbit	r2, r2
 800116c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001170:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001174:	fab2 f282 	clz	r2, r2
 8001178:	b252      	sxtb	r2, r2
 800117a:	f042 0220 	orr.w	r2, r2, #32
 800117e:	b252      	sxtb	r2, r2
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	f002 021f 	and.w	r2, r2, #31
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ae      	bne.n	80010f0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80d8 	beq.w	8001352 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d067      	beq.n	800127c <HAL_RCC_OscConfig+0x6e0>
 80011ac:	2301      	movs	r3, #1
 80011ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80011be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_RCC_OscConfig+0x65c>)
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	461a      	mov	r2, r3
 80011d0:	2301      	movs	r3, #1
 80011d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff f852 	bl	800027c <HAL_GetTick>
 80011d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011dc:	e00e      	b.n	80011fc <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011de:	f7ff f84d 	bl	800027c <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d906      	bls.n	80011fc <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e3bb      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	10908120 	.word	0x10908120
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001218:	fa93 f2a3 	rbit	r2, r3
 800121c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001226:	2202      	movs	r2, #2
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	fa93 f2a3 	rbit	r2, r3
 8001234:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001238:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4ba5      	ldr	r3, [pc, #660]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800123c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800123e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001242:	2102      	movs	r1, #2
 8001244:	6019      	str	r1, [r3, #0]
 8001246:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	fa93 f1a3 	rbit	r1, r3
 8001250:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001254:	6019      	str	r1, [r3, #0]
  return(result);
 8001256:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b25b      	sxtb	r3, r3
 8001262:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001266:	b25b      	sxtb	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	2101      	movs	r1, #1
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0b1      	beq.n	80011de <HAL_RCC_OscConfig+0x642>
 800127a:	e06a      	b.n	8001352 <HAL_RCC_OscConfig+0x7b6>
 800127c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	fa93 f2a3 	rbit	r2, r3
 800128e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001292:	601a      	str	r2, [r3, #0]
  return(result);
 8001294:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001298:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4b8c      	ldr	r3, [pc, #560]	; (80014d4 <HAL_RCC_OscConfig+0x938>)
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	461a      	mov	r2, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7fe ffe6 	bl	800027c <HAL_GetTick>
 80012b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	e009      	b.n	80012ca <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b6:	f7fe ffe1 	bl	800027c <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e34f      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
 80012ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012ce:	2202      	movs	r2, #2
 80012d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	fa93 f2a3 	rbit	r2, r3
 80012dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e6:	2202      	movs	r2, #2
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	fa93 f2a3 	rbit	r2, r3
 80012f4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012fe:	2202      	movs	r2, #2
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	fa93 f2a3 	rbit	r2, r3
 800130c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001312:	4b6f      	ldr	r3, [pc, #444]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001316:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800131a:	2102      	movs	r1, #2
 800131c:	6019      	str	r1, [r3, #0]
 800131e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	fa93 f1a3 	rbit	r1, r3
 8001328:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800132c:	6019      	str	r1, [r3, #0]
  return(result);
 800132e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800133e:	b25b      	sxtb	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1b1      	bne.n	80012b6 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8159 	beq.w	8001614 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d112      	bne.n	800139a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	4b56      	ldr	r3, [pc, #344]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	61d3      	str	r3, [r2, #28]
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001394:	2301      	movs	r3, #1
 8001396:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d11a      	bne.n	80013dc <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7fe ff63 	bl	800027c <HAL_GetTick>
 80013b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	e009      	b.n	80013d0 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013bc:	f7fe ff5e 	bl	800027c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b64      	cmp	r3, #100	; 0x64
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e2cc      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0ef      	beq.n	80013bc <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x858>
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a39      	ldr	r2, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	e02f      	b.n	8001454 <HAL_RCC_OscConfig+0x8b8>
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x87c>
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a30      	ldr	r2, [pc, #192]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0x8b8>
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x8a0>
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a2a      	ldr	r2, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6213      	str	r3, [r2, #32]
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0x8b8>
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800144e:	f023 0304 	bic.w	r3, r3, #4
 8001452:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d06b      	beq.n	8001536 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7fe ff0d 	bl	800027c <HAL_GetTick>
 8001462:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7fe ff08 	bl	800027c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e274      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
 8001480:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f2a3 	rbit	r2, r3
 8001492:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ae:	601a      	str	r2, [r3, #0]
  return(result);
 80014b0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	095b      	lsrs	r3, r3, #5
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d108      	bne.n	80014dc <HAL_RCC_OscConfig+0x940>
 80014ca:	4b01      	ldr	r3, [pc, #4]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	e013      	b.n	80014f8 <HAL_RCC_OscConfig+0x95c>
 80014d0:	40021000 	.word	0x40021000
 80014d4:	10908120 	.word	0x10908120
 80014d8:	40007000 	.word	0x40007000
 80014dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014e0:	2202      	movs	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	4bbb      	ldr	r3, [pc, #748]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014fc:	2102      	movs	r1, #2
 80014fe:	6011      	str	r1, [r2, #0]
 8001500:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	fa92 f1a2 	rbit	r1, r2
 800150a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800150e:	6011      	str	r1, [r2, #0]
  return(result);
 8001510:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	b252      	sxtb	r2, r2
 800151c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001520:	b252      	sxtb	r2, r2
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	f002 021f 	and.w	r2, r2, #31
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d099      	beq.n	8001468 <HAL_RCC_OscConfig+0x8cc>
 8001534:	e064      	b.n	8001600 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7fe fea1 	bl	800027c <HAL_GetTick>
 800153a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7fe fe9c 	bl	800027c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e208      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
 8001558:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	fa93 f2a3 	rbit	r2, r3
 800156a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001574:	2202      	movs	r2, #2
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fa93 f2a3 	rbit	r2, r3
 8001582:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001586:	601a      	str	r2, [r3, #0]
  return(result);
 8001588:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800158c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	095b      	lsrs	r3, r3, #5
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d102      	bne.n	80015a8 <HAL_RCC_OscConfig+0xa0c>
 80015a2:	4b90      	ldr	r3, [pc, #576]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	e00d      	b.n	80015c4 <HAL_RCC_OscConfig+0xa28>
 80015a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015c8:	2102      	movs	r1, #2
 80015ca:	6011      	str	r1, [r2, #0]
 80015cc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	fa92 f1a2 	rbit	r1, r2
 80015d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015da:	6011      	str	r1, [r2, #0]
  return(result);
 80015dc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	b252      	sxtb	r2, r2
 80015e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015ec:	b252      	sxtb	r2, r2
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f002 021f 	and.w	r2, r2, #31
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d19f      	bne.n	8001540 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001600:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4a75      	ldr	r2, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 800160e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001612:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 81a4 	beq.w	8001968 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001620:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b08      	cmp	r3, #8
 800162a:	f000 819b 	beq.w	8001964 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2b02      	cmp	r3, #2
 8001636:	f040 8113 	bne.w	8001860 <HAL_RCC_OscConfig+0xcc4>
 800163a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800163e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001652:	601a      	str	r2, [r3, #0]
  return(result);
 8001654:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001658:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001662:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	2300      	movs	r3, #0
 800166c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7fe fe05 	bl	800027c <HAL_GetTick>
 8001672:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	e009      	b.n	800168c <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7fe fe00 	bl	800027c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e16e      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
 800168c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016a4:	601a      	str	r2, [r3, #0]
  return(result);
 80016a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0xb2a>
 80016c0:	4b48      	ldr	r3, [pc, #288]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0xb62>
 80016c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	fa93 f2a3 	rbit	r2, r3
 80016da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001702:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001706:	6011      	str	r1, [r2, #0]
 8001708:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	fa92 f1a2 	rbit	r1, r2
 8001712:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001716:	6011      	str	r1, [r2, #0]
  return(result);
 8001718:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	b252      	sxtb	r2, r2
 8001724:	f042 0220 	orr.w	r2, r2, #32
 8001728:	b252      	sxtb	r2, r2
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	f002 021f 	and.w	r2, r2, #31
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d19d      	bne.n	8001678 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	430b      	orrs	r3, r1
 8001752:	4924      	ldr	r1, [pc, #144]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800175c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001770:	601a      	str	r2, [r3, #0]
  return(result);
 8001772:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001776:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	461a      	mov	r2, r3
 8001788:	2301      	movs	r3, #1
 800178a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7fe fd76 	bl	800027c <HAL_GetTick>
 8001790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001794:	e009      	b.n	80017aa <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7fe fd71 	bl	800027c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0df      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
 80017aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017c2:	601a      	str	r2, [r3, #0]
  return(result);
 80017c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d104      	bne.n	80017e8 <HAL_RCC_OscConfig+0xc4c>
 80017de:	4b01      	ldr	r3, [pc, #4]	; (80017e4 <HAL_RCC_OscConfig+0xc48>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xc84>
 80017e4:	40021000 	.word	0x40021000
 80017e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b55      	ldr	r3, [pc, #340]	; (8001974 <HAL_RCC_OscConfig+0xdd8>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001828:	6011      	str	r1, [r2, #0]
 800182a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	fa92 f1a2 	rbit	r1, r2
 8001834:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001838:	6011      	str	r1, [r2, #0]
  return(result);
 800183a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b252      	sxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b252      	sxtb	r2, r2
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d09b      	beq.n	8001796 <HAL_RCC_OscConfig+0xbfa>
 800185e:	e083      	b.n	8001968 <HAL_RCC_OscConfig+0xdcc>
 8001860:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001878:	601a      	str	r2, [r3, #0]
  return(result);
 800187a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	461a      	mov	r2, r3
 8001890:	2300      	movs	r3, #0
 8001892:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7fe fcf2 	bl	800027c <HAL_GetTick>
 8001898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189c:	e009      	b.n	80018b2 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7fe fced 	bl	800027c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e05b      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ca:	601a      	str	r2, [r3, #0]
  return(result);
 80018cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <HAL_RCC_OscConfig+0xd50>
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_RCC_OscConfig+0xdd8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	e01b      	b.n	8001924 <HAL_RCC_OscConfig+0xd88>
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fa93 f2a3 	rbit	r2, r3
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_RCC_OscConfig+0xdd8>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f107 0214 	add.w	r2, r7, #20
 8001928:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800192c:	6011      	str	r1, [r2, #0]
 800192e:	f107 0214 	add.w	r2, r7, #20
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	fa92 f1a2 	rbit	r1, r2
 8001938:	f107 0210 	add.w	r2, r7, #16
 800193c:	6011      	str	r1, [r2, #0]
  return(result);
 800193e:	f107 0210 	add.w	r2, r7, #16
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	fab2 f282 	clz	r2, r2
 8001948:	b252      	sxtb	r2, r2
 800194a:	f042 0220 	orr.w	r2, r2, #32
 800194e:	b252      	sxtb	r2, r2
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f002 021f 	and.w	r2, r2, #31
 8001956:	2101      	movs	r1, #1
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d19d      	bne.n	800189e <HAL_RCC_OscConfig+0xd02>
 8001962:	e001      	b.n	8001968 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b09e      	sub	sp, #120	; 0x78
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e164      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b92      	ldr	r3, [pc, #584]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d910      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b8f      	ldr	r3, [pc, #572]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 0207 	bic.w	r2, r3, #7
 80019a6:	498d      	ldr	r1, [pc, #564]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b8b      	ldr	r3, [pc, #556]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e14c      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b84      	ldr	r3, [pc, #528]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4981      	ldr	r1, [pc, #516]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80df 	beq.w	8001baa <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d13d      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xf8>
 80019f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xa6>
 8001a18:	4b71      	ldr	r3, [pc, #452]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e00f      	b.n	8001a3e <HAL_RCC_ClockConfig+0xc6>
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a30:	663b      	str	r3, [r7, #96]	; 0x60
 8001a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a3a:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a42:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a46:	fa92 f2a2 	rbit	r2, r2
 8001a4a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a4e:	fab2 f282 	clz	r2, r2
 8001a52:	b252      	sxtb	r2, r2
 8001a54:	f042 0220 	orr.w	r2, r2, #32
 8001a58:	b252      	sxtb	r2, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f002 021f 	and.w	r2, r2, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d17d      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0f4      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d13d      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x17c>
 8001a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x12a>
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	e00f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x14a>
 8001aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac6:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aca:	fa92 f2a2 	rbit	r2, r2
 8001ace:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ad2:	fab2 f282 	clz	r2, r2
 8001ad6:	b252      	sxtb	r2, r2
 8001ad8:	f042 0220 	orr.w	r2, r2, #32
 8001adc:	b252      	sxtb	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f002 021f 	and.w	r2, r2, #31
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d13b      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0b2      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2e2>
 8001af4:	2302      	movs	r3, #2
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	095b      	lsrs	r3, r3, #5
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x1a4>
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	e00d      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1c0>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	2202      	movs	r2, #2
 8001b3a:	61ba      	str	r2, [r7, #24]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	fa92 f2a2 	rbit	r2, r2
 8001b42:	617a      	str	r2, [r7, #20]
  return(result);
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b252      	sxtb	r2, r2
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b252      	sxtb	r2, r2
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f002 021f 	and.w	r2, r2, #31
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e078      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 0203 	bic.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	491a      	ldr	r1, [pc, #104]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7a:	f7fe fb7f 	bl	800027c <HAL_GetTick>
 8001b7e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7fe fb7b 	bl	800027c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e060      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_ClockConfig+0x268>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 020c 	and.w	r2, r3, #12
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d1eb      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d215      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 0207 	bic.w	r2, r3, #7
 8001bc0:	4906      	ldr	r1, [pc, #24]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <HAL_RCC_ClockConfig+0x264>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d006      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e03f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2e2>
 8001bda:	bf00      	nop
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_RCC_ClockConfig+0x2ec>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4919      	ldr	r1, [pc, #100]	; (8001c64 <HAL_RCC_ClockConfig+0x2ec>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_RCC_ClockConfig+0x2ec>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4911      	ldr	r1, [pc, #68]	; (8001c64 <HAL_RCC_ClockConfig+0x2ec>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c22:	f000 f825 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c26:	4601      	mov	r1, r0
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x2ec>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c30:	23f0      	movs	r3, #240	; 0xf0
 8001c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_RCC_ClockConfig+0x2f0>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c4e:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_RCC_ClockConfig+0x2f4>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7fe face 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3778      	adds	r7, #120	; 0x78
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	080032b8 	.word	0x080032b8
 8001c6c:	20000008 	.word	0x20000008

08001c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	; 0x2c
 8001c74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x30>
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x36>
 8001c9e:	e03c      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ca2:	623b      	str	r3, [r7, #32]
      break;
 8001ca4:	e03c      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cac:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001cb0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	607b      	str	r3, [r7, #4]
  return(result);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e004      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	623b      	str	r3, [r7, #32]
      break;
 8001d18:	e002      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d1c:	623b      	str	r3, [r7, #32]
      break;
 8001d1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d20:	6a3b      	ldr	r3, [r7, #32]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	372c      	adds	r7, #44	; 0x2c
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	007a1200 	.word	0x007a1200
 8001d38:	08003298 	.word	0x08003298
 8001d3c:	080032a8 	.word	0x080032a8
 8001d40:	003d0900 	.word	0x003d0900

08001d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d62:	f7ff ffef 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d66:	4601      	mov	r1, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d70:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d74:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	603b      	str	r3, [r7, #0]
  return(result);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	080032c8 	.word	0x080032c8

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001da6:	f7ff ffcd 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001daa:	4601      	mov	r1, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001db4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001db8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	603b      	str	r3, [r7, #0]
  return(result);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	080032c8 	.word	0x080032c8

08001de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b092      	sub	sp, #72	; 0x48
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80d6 	beq.w	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10e      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a49      	ldr	r2, [pc, #292]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	61d3      	str	r3, [r2, #28]
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a40      	ldr	r2, [pc, #256]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe fa17 	bl	800027c <HAL_GetTick>
 8001e4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7fe fa13 	bl	800027c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e168      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x352>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8083 	beq.w	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d07b      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2300      	movs	r3, #0
 8001edc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04c      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe f9c5 	bl	800027c <HAL_GetTick>
 8001ef2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7fe f9c1 	bl	800027c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e114      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
 8001f18:	2302      	movs	r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d108      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001f3a:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	e00d      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	10908100 	.word	0x10908100
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	4b79      	ldr	r3, [pc, #484]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	613a      	str	r2, [r7, #16]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	fa92 f2a2 	rbit	r2, r2
 8001f66:	60fa      	str	r2, [r7, #12]
  return(result);
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	fab2 f282 	clz	r2, r2
 8001f6e:	b252      	sxtb	r2, r2
 8001f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f74:	b252      	sxtb	r2, r2
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	f002 021f 	and.w	r2, r2, #31
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0b6      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f88:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	496a      	ldr	r1, [pc, #424]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	495e      	ldr	r1, [pc, #376]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd8:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4956      	ldr	r1, [pc, #344]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ff6:	4b52      	ldr	r3, [pc, #328]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	494f      	ldr	r1, [pc, #316]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f023 0210 	bic.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	4947      	ldr	r1, [pc, #284]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	4940      	ldr	r1, [pc, #256]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f023 0220 	bic.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4938      	ldr	r1, [pc, #224]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800206e:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4931      	ldr	r1, [pc, #196]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800207c:	4313      	orrs	r3, r2
 800207e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800208c:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4929      	ldr	r1, [pc, #164]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	4922      	ldr	r1, [pc, #136]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	491a      	ldr	r1, [pc, #104]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	4913      	ldr	r1, [pc, #76]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	490b      	ldr	r1, [pc, #44]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	4904      	ldr	r1, [pc, #16]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3748      	adds	r7, #72	; 0x48
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000

08002144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e084      	b.n	8002260 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 feef 	bl	8002f54 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800218c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002196:	d902      	bls.n	800219e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e002      	b.n	80021a4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800219e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80021ac:	d007      	beq.n	80021be <HAL_SPI_Init+0x7a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021b6:	d002      	beq.n	80021be <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10b      	bne.n	80021de <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021ce:	d903      	bls.n	80021d8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
 80021d6:	e002      	b.n	80021de <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	ea42 0103 	orr.w	r1, r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0204 	and.w	r2, r3, #4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	ea42 0103 	orr.w	r1, r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e043      	b.n	8002302 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fea2 	bl	8002fd8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8dd 	bl	800246c <UART_SetConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e022      	b.n	8002302 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 facf 	bl	8002868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fb56 	bl	80029ac <UART_CheckIdleState>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08a      	sub	sp, #40	; 0x28
 800230e:	af02      	add	r7, sp, #8
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 809a 	bne.w	8002460 <HAL_UART_Receive+0x156>
  {
    if((pData == NULL ) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_UART_Receive+0x2e>
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e092      	b.n	8002462 <HAL_UART_Receive+0x158>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_UART_Receive+0x40>
 8002346:	2302      	movs	r3, #2
 8002348:	e08b      	b.n	8002462 <HAL_UART_Receive+0x158>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2222      	movs	r2, #34	; 0x22
 800235c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002360:	f7fd ff8c 	bl	800027c <HAL_GetTick>
 8002364:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d10e      	bne.n	800239e <HAL_UART_Receive+0x94>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_UART_Receive+0x8a>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800238e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002392:	e015      	b.n	80023c0 <HAL_UART_Receive+0xb6>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	22ff      	movs	r2, #255	; 0xff
 8002398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800239c:	e010      	b.n	80023c0 <HAL_UART_Receive+0xb6>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_UART_Receive+0xb6>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Receive+0xae>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Receive+0xb6>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	227f      	movs	r2, #127	; 0x7f
 80023bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80023c6:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80023c8:	e03a      	b.n	8002440 <HAL_UART_Receive+0x136>
    {
      huart->RxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2120      	movs	r1, #32
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fb29 	bl	8002a3e <UART_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_UART_Receive+0xec>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e035      	b.n	8002462 <HAL_UART_Receive+0x158>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fe:	d112      	bne.n	8002426 <HAL_UART_Receive+0x11c>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10e      	bne.n	8002426 <HAL_UART_Receive+0x11c>
      {
        tmp = (uint16_t*) pData ;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002412:	b29a      	uxth	r2, r3
 8002414:	8b7b      	ldrh	r3, [r7, #26]
 8002416:	4013      	ands	r3, r2
 8002418:	b29a      	uxth	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3302      	adds	r3, #2
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	e00c      	b.n	8002440 <HAL_UART_Receive+0x136>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800242c:	b29b      	uxth	r3, r3
 800242e:	b2d9      	uxtb	r1, r3
 8002430:	8b7b      	ldrh	r3, [r7, #26]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c58      	adds	r0, r3, #1
 8002438:	60b8      	str	r0, [r7, #8]
 800243a:	400a      	ands	r2, r1
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1be      	bne.n	80023ca <HAL_UART_Receive+0xc0>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_UART_Receive+0x158>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002478:	2310      	movs	r3, #16
 800247a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 800247c:	2300      	movs	r3, #0
 800247e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002480:	2300      	movs	r3, #0
 8002482:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80024aa:	f023 030c 	bic.w	r3, r3, #12
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4ab4      	ldr	r2, [pc, #720]	; (80027c4 <UART_SetConfig+0x358>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d121      	bne.n	800253c <UART_SetConfig+0xd0>
 80024f8:	4bb3      	ldr	r3, [pc, #716]	; (80027c8 <UART_SetConfig+0x35c>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d817      	bhi.n	8002534 <UART_SetConfig+0xc8>
 8002504:	a201      	add	r2, pc, #4	; (adr r2, 800250c <UART_SetConfig+0xa0>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002529 	.word	0x08002529
 8002514:	0800252f 	.word	0x0800252f
 8002518:	08002523 	.word	0x08002523
 800251c:	2301      	movs	r3, #1
 800251e:	75fb      	strb	r3, [r7, #23]
 8002520:	e0b2      	b.n	8002688 <UART_SetConfig+0x21c>
 8002522:	2302      	movs	r3, #2
 8002524:	75fb      	strb	r3, [r7, #23]
 8002526:	e0af      	b.n	8002688 <UART_SetConfig+0x21c>
 8002528:	2304      	movs	r3, #4
 800252a:	75fb      	strb	r3, [r7, #23]
 800252c:	e0ac      	b.n	8002688 <UART_SetConfig+0x21c>
 800252e:	2308      	movs	r3, #8
 8002530:	75fb      	strb	r3, [r7, #23]
 8002532:	e0a9      	b.n	8002688 <UART_SetConfig+0x21c>
 8002534:	2310      	movs	r3, #16
 8002536:	75fb      	strb	r3, [r7, #23]
 8002538:	bf00      	nop
 800253a:	e0a5      	b.n	8002688 <UART_SetConfig+0x21c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4aa2      	ldr	r2, [pc, #648]	; (80027cc <UART_SetConfig+0x360>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d123      	bne.n	800258e <UART_SetConfig+0x122>
 8002546:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <UART_SetConfig+0x35c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d012      	beq.n	800257a <UART_SetConfig+0x10e>
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d802      	bhi.n	8002560 <UART_SetConfig+0xf4>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <UART_SetConfig+0x102>
 800255e:	e012      	b.n	8002586 <UART_SetConfig+0x11a>
 8002560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002564:	d00c      	beq.n	8002580 <UART_SetConfig+0x114>
 8002566:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800256a:	d003      	beq.n	8002574 <UART_SetConfig+0x108>
 800256c:	e00b      	b.n	8002586 <UART_SetConfig+0x11a>
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]
 8002572:	e089      	b.n	8002688 <UART_SetConfig+0x21c>
 8002574:	2302      	movs	r3, #2
 8002576:	75fb      	strb	r3, [r7, #23]
 8002578:	e086      	b.n	8002688 <UART_SetConfig+0x21c>
 800257a:	2304      	movs	r3, #4
 800257c:	75fb      	strb	r3, [r7, #23]
 800257e:	e083      	b.n	8002688 <UART_SetConfig+0x21c>
 8002580:	2308      	movs	r3, #8
 8002582:	75fb      	strb	r3, [r7, #23]
 8002584:	e080      	b.n	8002688 <UART_SetConfig+0x21c>
 8002586:	2310      	movs	r3, #16
 8002588:	75fb      	strb	r3, [r7, #23]
 800258a:	bf00      	nop
 800258c:	e07c      	b.n	8002688 <UART_SetConfig+0x21c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a8f      	ldr	r2, [pc, #572]	; (80027d0 <UART_SetConfig+0x364>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d123      	bne.n	80025e0 <UART_SetConfig+0x174>
 8002598:	4b8b      	ldr	r3, [pc, #556]	; (80027c8 <UART_SetConfig+0x35c>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80025a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025a4:	d012      	beq.n	80025cc <UART_SetConfig+0x160>
 80025a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025aa:	d802      	bhi.n	80025b2 <UART_SetConfig+0x146>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <UART_SetConfig+0x154>
 80025b0:	e012      	b.n	80025d8 <UART_SetConfig+0x16c>
 80025b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025b6:	d00c      	beq.n	80025d2 <UART_SetConfig+0x166>
 80025b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025bc:	d003      	beq.n	80025c6 <UART_SetConfig+0x15a>
 80025be:	e00b      	b.n	80025d8 <UART_SetConfig+0x16c>
 80025c0:	2300      	movs	r3, #0
 80025c2:	75fb      	strb	r3, [r7, #23]
 80025c4:	e060      	b.n	8002688 <UART_SetConfig+0x21c>
 80025c6:	2302      	movs	r3, #2
 80025c8:	75fb      	strb	r3, [r7, #23]
 80025ca:	e05d      	b.n	8002688 <UART_SetConfig+0x21c>
 80025cc:	2304      	movs	r3, #4
 80025ce:	75fb      	strb	r3, [r7, #23]
 80025d0:	e05a      	b.n	8002688 <UART_SetConfig+0x21c>
 80025d2:	2308      	movs	r3, #8
 80025d4:	75fb      	strb	r3, [r7, #23]
 80025d6:	e057      	b.n	8002688 <UART_SetConfig+0x21c>
 80025d8:	2310      	movs	r3, #16
 80025da:	75fb      	strb	r3, [r7, #23]
 80025dc:	bf00      	nop
 80025de:	e053      	b.n	8002688 <UART_SetConfig+0x21c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a7b      	ldr	r2, [pc, #492]	; (80027d4 <UART_SetConfig+0x368>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d123      	bne.n	8002632 <UART_SetConfig+0x1c6>
 80025ea:	4b77      	ldr	r3, [pc, #476]	; (80027c8 <UART_SetConfig+0x35c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f6:	d012      	beq.n	800261e <UART_SetConfig+0x1b2>
 80025f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fc:	d802      	bhi.n	8002604 <UART_SetConfig+0x198>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <UART_SetConfig+0x1a6>
 8002602:	e012      	b.n	800262a <UART_SetConfig+0x1be>
 8002604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002608:	d00c      	beq.n	8002624 <UART_SetConfig+0x1b8>
 800260a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800260e:	d003      	beq.n	8002618 <UART_SetConfig+0x1ac>
 8002610:	e00b      	b.n	800262a <UART_SetConfig+0x1be>
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]
 8002616:	e037      	b.n	8002688 <UART_SetConfig+0x21c>
 8002618:	2302      	movs	r3, #2
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	e034      	b.n	8002688 <UART_SetConfig+0x21c>
 800261e:	2304      	movs	r3, #4
 8002620:	75fb      	strb	r3, [r7, #23]
 8002622:	e031      	b.n	8002688 <UART_SetConfig+0x21c>
 8002624:	2308      	movs	r3, #8
 8002626:	75fb      	strb	r3, [r7, #23]
 8002628:	e02e      	b.n	8002688 <UART_SetConfig+0x21c>
 800262a:	2310      	movs	r3, #16
 800262c:	75fb      	strb	r3, [r7, #23]
 800262e:	bf00      	nop
 8002630:	e02a      	b.n	8002688 <UART_SetConfig+0x21c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <UART_SetConfig+0x36c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d123      	bne.n	8002684 <UART_SetConfig+0x218>
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <UART_SetConfig+0x35c>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002648:	d012      	beq.n	8002670 <UART_SetConfig+0x204>
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264e:	d802      	bhi.n	8002656 <UART_SetConfig+0x1ea>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <UART_SetConfig+0x1f8>
 8002654:	e012      	b.n	800267c <UART_SetConfig+0x210>
 8002656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800265a:	d00c      	beq.n	8002676 <UART_SetConfig+0x20a>
 800265c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002660:	d003      	beq.n	800266a <UART_SetConfig+0x1fe>
 8002662:	e00b      	b.n	800267c <UART_SetConfig+0x210>
 8002664:	2300      	movs	r3, #0
 8002666:	75fb      	strb	r3, [r7, #23]
 8002668:	e00e      	b.n	8002688 <UART_SetConfig+0x21c>
 800266a:	2302      	movs	r3, #2
 800266c:	75fb      	strb	r3, [r7, #23]
 800266e:	e00b      	b.n	8002688 <UART_SetConfig+0x21c>
 8002670:	2304      	movs	r3, #4
 8002672:	75fb      	strb	r3, [r7, #23]
 8002674:	e008      	b.n	8002688 <UART_SetConfig+0x21c>
 8002676:	2308      	movs	r3, #8
 8002678:	75fb      	strb	r3, [r7, #23]
 800267a:	e005      	b.n	8002688 <UART_SetConfig+0x21c>
 800267c:	2310      	movs	r3, #16
 800267e:	75fb      	strb	r3, [r7, #23]
 8002680:	bf00      	nop
 8002682:	e001      	b.n	8002688 <UART_SetConfig+0x21c>
 8002684:	2310      	movs	r3, #16
 8002686:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002690:	d16f      	bne.n	8002772 <UART_SetConfig+0x306>
  {
    switch (clocksource)
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d857      	bhi.n	8002748 <UART_SetConfig+0x2dc>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <UART_SetConfig+0x234>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026c5 	.word	0x080026c5
 80026a4:	080026e1 	.word	0x080026e1
 80026a8:	080026fd 	.word	0x080026fd
 80026ac:	08002749 	.word	0x08002749
 80026b0:	08002717 	.word	0x08002717
 80026b4:	08002749 	.word	0x08002749
 80026b8:	08002749 	.word	0x08002749
 80026bc:	08002749 	.word	0x08002749
 80026c0:	08002733 	.word	0x08002733
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026c4:	f7ff fb4a 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 80026c8:	4603      	mov	r3, r0
 80026ca:	005a      	lsls	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	441a      	add	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	82bb      	strh	r3, [r7, #20]
        break;
 80026de:	e036      	b.n	800274e <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026e0:	f7ff fb5e 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80026e4:	4603      	mov	r3, r0
 80026e6:	005a      	lsls	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	441a      	add	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	82bb      	strh	r3, [r7, #20]
        break;
 80026fa:	e028      	b.n	800274e <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002706:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6852      	ldr	r2, [r2, #4]
 800270e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002712:	82bb      	strh	r3, [r7, #20]
        break;
 8002714:	e01b      	b.n	800274e <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002716:	f7ff faab 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 800271a:	4603      	mov	r3, r0
 800271c:	005a      	lsls	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	82bb      	strh	r3, [r7, #20]
        break;
 8002730:	e00d      	b.n	800274e <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	82bb      	strh	r3, [r7, #20]
        break;
 8002746:	e002      	b.n	800274e <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	74fb      	strb	r3, [r7, #19]
        break;
 800274c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800274e:	8abb      	ldrh	r3, [r7, #20]
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002756:	8abb      	ldrh	r3, [r7, #20]
 8002758:	105b      	asrs	r3, r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	b29a      	uxth	r2, r3
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	4313      	orrs	r3, r2
 8002766:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	897a      	ldrh	r2, [r7, #10]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	e075      	b.n	800285e <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d86f      	bhi.n	8002858 <UART_SetConfig+0x3ec>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <UART_SetConfig+0x314>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027a5 	.word	0x080027a5
 8002784:	080027dd 	.word	0x080027dd
 8002788:	080027fd 	.word	0x080027fd
 800278c:	08002859 	.word	0x08002859
 8002790:	0800281d 	.word	0x0800281d
 8002794:	08002859 	.word	0x08002859
 8002798:	08002859 	.word	0x08002859
 800279c:	08002859 	.word	0x08002859
 80027a0:	0800283d 	.word	0x0800283d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027a4:	f7ff fada 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60da      	str	r2, [r3, #12]
        break;
 80027c2:	e04c      	b.n	800285e <UART_SetConfig+0x3f2>
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40004400 	.word	0x40004400
 80027d0:	40004800 	.word	0x40004800
 80027d4:	40004c00 	.word	0x40004c00
 80027d8:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027dc:	f7ff fae0 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	441a      	add	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60da      	str	r2, [r3, #12]
        break;
 80027fa:	e030      	b.n	800285e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002806:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6852      	ldr	r2, [r2, #4]
 800280e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60da      	str	r2, [r3, #12]
        break;
 800281a:	e020      	b.n	800285e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800281c:	f7ff fa28 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	441a      	add	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
        break;
 800283a:	e010      	b.n	800285e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60da      	str	r2, [r3, #12]
        break;
 8002856:	e002      	b.n	800285e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	74fb      	strb	r3, [r7, #19]
        break;
 800285c:	bf00      	nop
    }
  }

  return ret;
 800285e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01a      	beq.n	800297e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002966:	d10a      	bne.n	800297e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029be:	f7fd fc5d 	bl	800027c <HAL_GetTick>
 80029c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d10e      	bne.n	80029f0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f82c 	bl	8002a3e <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e022      	b.n	8002a36 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d10e      	bne.n	8002a1c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f816 	bl	8002a3e <UART_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e00c      	b.n	8002a36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4e:	e02c      	b.n	8002aaa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a56:	d028      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a5e:	f7fd fc0d 	bl	800027c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d21d      	bcs.n	8002aaa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e00f      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d0c3      	beq.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ad8:	f7fd fb76 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002adc:	f000 f816 	bl	8002b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae0:	f000 f948 	bl	8002d74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ae4:	f000 f876 	bl	8002bd4 <MX_I2C1_Init>

  MX_SPI1_Init();
 8002ae8:	f000 f8b4 	bl	8002c54 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002aec:	f000 f920 	bl	8002d30 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8002af0:	f000 f8ee 	bl	8002cd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
     //HAL_UART_Transmit(&huart2,(uint8_t*) msg,sizeof(msg),100);
	  HAL_UART_Receive(&huart2,Rx_data, sizeof(Rx_data),HAL_MAX_DELAY);
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af8:	2203      	movs	r2, #3
 8002afa:	4902      	ldr	r1, [pc, #8]	; (8002b04 <main+0x30>)
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <main+0x34>)
 8002afe:	f7ff fc04 	bl	800230a <HAL_UART_Receive>
 8002b02:	e7f7      	b.n	8002af4 <main+0x20>
 8002b04:	20000078 	.word	0x20000078
 8002b08:	200000e0 	.word	0x200000e0

08002b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b09e      	sub	sp, #120	; 0x78
 8002b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b16:	2228      	movs	r2, #40	; 0x28
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fba8 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b30:	463b      	mov	r3, r7
 8002b32:	223c      	movs	r2, #60	; 0x3c
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fb9a 	bl	8003270 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b46:	2300      	movs	r3, #0
 8002b48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b4e:	2310      	movs	r3, #16
 8002b50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b52:	2302      	movs	r3, #2
 8002b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b60:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f818 	bl	8000b9c <HAL_RCC_OscConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002b72:	f000 f97f 	bl	8002e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b76:	230f      	movs	r3, #15
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fef0 	bl	8001978 <HAL_RCC_ClockConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b9e:	f000 f969 	bl	8002e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <SystemClock_Config+0xc4>)
 8002ba4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8002bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f914 	bl	8001de4 <HAL_RCCEx_PeriphCLKConfig>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002bc2:	f000 f957 	bl	8002e74 <Error_Handler>
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3778      	adds	r7, #120	; 0x78
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00020022 	.word	0x00020022

08002bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <MX_I2C1_Init+0x78>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <MX_I2C1_Init+0x7c>)
 8002be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c0e:	480e      	ldr	r0, [pc, #56]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c10:	f7fd fdbc 	bl	800078c <HAL_I2C_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c1a:	f000 f92b 	bl	8002e74 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c22:	f7fd fe42 	bl	80008aa <HAL_I2CEx_ConfigAnalogFilter>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c2c:	f000 f922 	bl	8002e74 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c30:	2100      	movs	r1, #0
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c34:	f7fd fe84 	bl	8000940 <HAL_I2CEx_ConfigDigitalFilter>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c3e:	f000 f919 	bl	8002e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000002c 	.word	0x2000002c
 8002c4c:	40005400 	.word	0x40005400
 8002c50:	2000090e 	.word	0x2000090e

08002c54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <MX_SPI1_Init+0x78>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002cae:	2208      	movs	r2, #8
 8002cb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cb2:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <MX_SPI1_Init+0x74>)
 8002cb4:	f7ff fa46 	bl	8002144 <HAL_SPI_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cbe:	f000 f8d9 	bl	8002e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000007c 	.word	0x2000007c
 8002ccc:	40013000 	.word	0x40013000

08002cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002cd6:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <MX_USART2_UART_Init+0x5c>)
 8002cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;//38400
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_USART2_UART_Init+0x58>)
 8002d14:	f7ff faa8 	bl	8002268 <HAL_UART_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d1e:	f000 f8a9 	bl	8002e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200000e0 	.word	0x200000e0
 8002d2c:	40004400 	.word	0x40004400

08002d30 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <MX_USB_PCD_Init+0x3c>)
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <MX_USB_PCD_Init+0x40>)
 8002d38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_USB_PCD_Init+0x3c>)
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <MX_USB_PCD_Init+0x3c>)
 8002d42:	2202      	movs	r2, #2
 8002d44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_USB_PCD_Init+0x3c>)
 8002d48:	2202      	movs	r2, #2
 8002d4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <MX_USB_PCD_Init+0x3c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_USB_PCD_Init+0x3c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002d58:	4804      	ldr	r0, [pc, #16]	; (8002d6c <MX_USB_PCD_Init+0x3c>)
 8002d5a:	f7fd fe3f 	bl	80009dc <HAL_PCD_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002d64:	f000 f886 	bl	8002e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000150 	.word	0x20000150
 8002d70:	40005c00 	.word	0x40005c00

08002d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d8a:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d94:	6153      	str	r3, [r2, #20]
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dac:	6153      	str	r3, [r2, #20]
 8002dae:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4a2a      	ldr	r2, [pc, #168]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc4:	6153      	str	r3, [r2, #20]
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ddc:	6153      	str	r3, [r2, #20]
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6153      	str	r3, [r2, #20]
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <MX_GPIO_Init+0xf4>)
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8002e02:	2200      	movs	r2, #0
 8002e04:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002e08:	4818      	ldr	r0, [pc, #96]	; (8002e6c <MX_GPIO_Init+0xf8>)
 8002e0a:	f7fd fca7 	bl	800075c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8002e0e:	2337      	movs	r3, #55	; 0x37
 8002e10:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <MX_GPIO_Init+0xfc>)
 8002e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4812      	ldr	r0, [pc, #72]	; (8002e6c <MX_GPIO_Init+0xf8>)
 8002e22:	f7fd fb1d 	bl	8000460 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8002e26:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002e2a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	480b      	ldr	r0, [pc, #44]	; (8002e6c <MX_GPIO_Init+0xf8>)
 8002e40:	f7fd fb0e 	bl	8000460 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e44:	2301      	movs	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5a:	f7fd fb01 	bl	8000460 <HAL_GPIO_Init>

}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	48001000 	.word	0x48001000
 8002e70:	10120000 	.word	0x10120000

08002e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6193      	str	r3, [r2, #24]
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_MspInit+0x44>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <HAL_MspInit+0x44>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	61d3      	str	r3, [r2, #28]
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_MspInit+0x44>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002eba:	2007      	movs	r0, #7
 8002ebc:	f7fd fa9c 	bl	80003f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_I2C_MspInit+0x7c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d127      	bne.n	8002f3e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_I2C_MspInit+0x80>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <HAL_I2C_MspInit+0x80>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6153      	str	r3, [r2, #20]
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_I2C_MspInit+0x80>)
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002f06:	23c0      	movs	r3, #192	; 0xc0
 8002f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f0a:	2312      	movs	r3, #18
 8002f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f16:	2304      	movs	r3, #4
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480b      	ldr	r0, [pc, #44]	; (8002f50 <HAL_I2C_MspInit+0x84>)
 8002f22:	f7fd fa9d 	bl	8000460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_I2C_MspInit+0x80>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <HAL_I2C_MspInit+0x80>)
 8002f2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_I2C_MspInit+0x80>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40005400 	.word	0x40005400
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	48000400 	.word	0x48000400

08002f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <HAL_SPI_MspInit+0x7c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d128      	bne.n	8002fc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_SPI_MspInit+0x80>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_SPI_MspInit+0x80>)
 8002f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f80:	6193      	str	r3, [r2, #24]
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_SPI_MspInit+0x80>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_SPI_MspInit+0x80>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_SPI_MspInit+0x80>)
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f98:	6153      	str	r3, [r2, #20]
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_SPI_MspInit+0x80>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002fa6:	23e0      	movs	r3, #224	; 0xe0
 8002fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc4:	f7fd fa4c 	bl	8000460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fc8:	bf00      	nop
 8002fca:	3728      	adds	r7, #40	; 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40013000 	.word	0x40013000
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <HAL_UART_MspInit+0x7c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d128      	bne.n	800304c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <HAL_UART_MspInit+0x80>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4a16      	ldr	r2, [pc, #88]	; (8003058 <HAL_UART_MspInit+0x80>)
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	61d3      	str	r3, [r2, #28]
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_UART_MspInit+0x80>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_UART_MspInit+0x80>)
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	4a10      	ldr	r2, [pc, #64]	; (8003058 <HAL_UART_MspInit+0x80>)
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301c:	6153      	str	r3, [r2, #20]
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_UART_MspInit+0x80>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800302a:	230c      	movs	r3, #12
 800302c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003036:	2303      	movs	r3, #3
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800303a:	2307      	movs	r3, #7
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	4619      	mov	r1, r3
 8003044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003048:	f7fd fa0a 	bl	8000460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800304c:	bf00      	nop
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40004400 	.word	0x40004400
 8003058:	40021000 	.word	0x40021000

0800305c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_PCD_MspInit+0x80>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d129      	bne.n	80030d2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_PCD_MspInit+0x84>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <HAL_PCD_MspInit+0x84>)
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	6153      	str	r3, [r2, #20]
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_PCD_MspInit+0x84>)
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8003096:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80030a8:	230e      	movs	r3, #14
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b6:	f7fd f9d3 	bl	8000460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_PCD_MspInit+0x84>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_PCD_MspInit+0x84>)
 80030c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030c4:	61d3      	str	r3, [r2, #28]
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_PCD_MspInit+0x84>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80030d2:	bf00      	nop
 80030d4:	3728      	adds	r7, #40	; 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40005c00 	.word	0x40005c00
 80030e0:	40021000 	.word	0x40021000

080030e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <HardFault_Handler+0x4>

080030f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <MemManage_Handler+0x4>

080030fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <BusFault_Handler+0x4>

08003104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <UsageFault_Handler+0x4>

0800310a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003138:	f7fd f88c 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}

08003140 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <SystemInit+0x84>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <SystemInit+0x84>)
 800314c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003154:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <SystemInit+0x88>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <SystemInit+0x88>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <SystemInit+0x88>)
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4918      	ldr	r1, [pc, #96]	; (80031c8 <SystemInit+0x88>)
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <SystemInit+0x8c>)
 8003168:	4013      	ands	r3, r2
 800316a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <SystemInit+0x88>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <SystemInit+0x88>)
 8003172:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <SystemInit+0x88>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a11      	ldr	r2, [pc, #68]	; (80031c8 <SystemInit+0x88>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <SystemInit+0x88>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <SystemInit+0x88>)
 800318e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003192:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <SystemInit+0x88>)
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <SystemInit+0x88>)
 800319a:	f023 030f 	bic.w	r3, r3, #15
 800319e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <SystemInit+0x88>)
 80031a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a4:	4908      	ldr	r1, [pc, #32]	; (80031c8 <SystemInit+0x88>)
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <SystemInit+0x90>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <SystemInit+0x88>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <SystemInit+0x84>)
 80031b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031b8:	609a      	str	r2, [r3, #8]
#endif
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00
 80031c8:	40021000 	.word	0x40021000
 80031cc:	f87fc00c 	.word	0xf87fc00c
 80031d0:	ff00fccc 	.word	0xff00fccc

080031d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800320c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031da:	e003      	b.n	80031e4 <LoopCopyDataInit>

080031dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031e2:	3104      	adds	r1, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031e4:	480b      	ldr	r0, [pc, #44]	; (8003214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031ec:	d3f6      	bcc.n	80031dc <CopyDataInit>
	ldr	r2, =_sbss
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <LoopForever+0x12>)
	b	LoopFillZerobss
 80031f0:	e002      	b.n	80031f8 <LoopFillZerobss>

080031f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031f4:	f842 3b04 	str.w	r3, [r2], #4

080031f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <LoopForever+0x16>)
	cmp	r2, r3
 80031fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031fc:	d3f9      	bcc.n	80031f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031fe:	f7ff ff9f 	bl	8003140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003202:	f000 f811 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003206:	f7ff fc65 	bl	8002ad4 <main>

0800320a <LoopForever>:

LoopForever:
    b LoopForever
 800320a:	e7fe      	b.n	800320a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800320c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003210:	080032d8 	.word	0x080032d8
	ldr	r0, =_sdata
 8003214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003218:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800321c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003220:	200004f8 	.word	0x200004f8

08003224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003224:	e7fe      	b.n	8003224 <ADC1_2_IRQHandler>
	...

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4e0d      	ldr	r6, [pc, #52]	; (8003260 <__libc_init_array+0x38>)
 800322c:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 800322e:	1ba4      	subs	r4, r4, r6
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	2500      	movs	r5, #0
 8003234:	42a5      	cmp	r5, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	4e0b      	ldr	r6, [pc, #44]	; (8003268 <__libc_init_array+0x40>)
 800323a:	4c0c      	ldr	r4, [pc, #48]	; (800326c <__libc_init_array+0x44>)
 800323c:	f000 f820 	bl	8003280 <_init>
 8003240:	1ba4      	subs	r4, r4, r6
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	2500      	movs	r5, #0
 8003246:	42a5      	cmp	r5, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003250:	4798      	blx	r3
 8003252:	3501      	adds	r5, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800325a:	4798      	blx	r3
 800325c:	3501      	adds	r5, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	080032d0 	.word	0x080032d0
 8003264:	080032d0 	.word	0x080032d0
 8003268:	080032d0 	.word	0x080032d0
 800326c:	080032d4 	.word	0x080032d4

08003270 <memset>:
 8003270:	4402      	add	r2, r0
 8003272:	4603      	mov	r3, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <_init>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	bf00      	nop
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr

0800328c <_fini>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr
